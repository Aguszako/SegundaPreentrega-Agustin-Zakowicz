%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: bw_shape_137.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Zydd
%%CreationDate: 8/17/2016
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2016-08-17T20:33:33+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9O6RpGnaRp0Gn6fAlvbW&#xA;6LGiRqFFFAFTQDfbc4qjMVWyRxyIUkUOjbMrAEH5g4ql2heWtE0KGWLTLSO2E0sk0hRQCTK5bjX+&#xA;VBRUXoqgAbAYqmeKuxVKbPyp5fstZudYtrGGK+u0jSWRY1B/d1+IUGzMCAxHXivhiqbYq7FUpvPK&#xA;nl+91m21i5sYZb60SRIpGjUn95T4jUbsoBCk9OTeOKptirsVSzXfLWia7DFFqdpHciGWOaMuoJBi&#xA;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&#xA;O0ZKgKT1/moCq//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
0 0 mo
1000 0 li
1000 1000 li
0 1000 li
0 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
gsave
0 0 mo
1000 0 li
1000 1000 li
0 1000 li
0 0 li
cp
clp
58.3999 50 mo
52.7998 50 50 47.2002 50 41.6001 cv
50 47.2002 47.2002 50 41.6001 50 cv
47.2002 50 50 52.7998 50 58.3999 cv
50 52.7998 52.7998 50 58.3999 50 cv
cp
64 50 mo
54.6665 50 50 54.6665 50 64 cv
50 54.6665 45.3335 50 36 50 cv
45.3335 50 50 45.3335 50 36 cv
50 45.3335 54.6665 50 64 50 cv
cp
.0392157 .0392157 .0392157 rgb
f
60.7998 150 mo
53.6001 150 50 146.4 50 139.2 cv
50 146.4 46.3999 150 39.2002 150 cv
46.3999 150 50 153.6 50 160.8 cv
50 153.6 53.6001 150 60.7998 150 cv
cp
68 150 mo
56 150 50 156 50 168 cv
50 156 44 150 32 150 cv
44 150 50 144 50 132 cv
50 144 56 150 68 150 cv
cp
f
63.2002 250 mo
54.3999 250 50 245.6 50 236.8 cv
50 245.6 45.6001 250 36.7998 250 cv
45.6001 250 50 254.4 50 263.2 cv
50 254.4 54.3999 250 63.2002 250 cv
cp
72 250 mo
57.3335 250 50 257.333 50 272 cv
50 257.333 42.6665 250 28 250 cv
42.6665 250 50 242.667 50 228 cv
50 242.667 57.3335 250 72 250 cv
cp
f
65.6001 350 mo
55.2002 350 50 344.8 50 334.4 cv
50 344.8 44.7998 350 34.3999 350 cv
44.7998 350 50 355.2 50 365.6 cv
50 355.2 55.2002 350 65.6001 350 cv
cp
76 350 mo
58.6665 350 50 358.667 50 376 cv
50 358.667 41.3335 350 24 350 cv
41.3335 350 50 341.333 50 324 cv
50 341.333 58.6665 350 76 350 cv
cp
f
68 450 mo
56 450 50 444 50 432 cv
50 444 44 450 32 450 cv
44 450 50 456 50 468 cv
50 456 56 450 68 450 cv
cp
80 450 mo
60 450 50 460 50 480 cv
50 460 40 450 20 450 cv
40 450 50 440 50 420 cv
50 440 60 450 80 450 cv
cp
f
70.3999 550 mo
56.7998 550 50 543.2 50 529.6 cv
50 543.2 43.2002 550 29.6001 550 cv
43.2002 550 50 556.8 50 570.4 cv
50 556.8 56.7998 550 70.3999 550 cv
cp
84 550 mo
61.3335 550 50 561.333 50 584 cv
50 561.333 38.6665 550 16 550 cv
38.6665 550 50 538.667 50 516 cv
50 538.667 61.3335 550 84 550 cv
cp
f
72.7998 650 mo
57.6001 650 50 642.4 50 627.2 cv
50 642.4 42.3999 650 27.2002 650 cv
42.3999 650 50 657.6 50 672.8 cv
50 657.6 57.6001 650 72.7998 650 cv
cp
88 650 mo
62.6665 650 50 662.667 50 688 cv
50 662.667 37.3335 650 12 650 cv
37.3335 650 50 637.333 50 612 cv
50 637.333 62.6665 650 88 650 cv
cp
f
75.2002 750 mo
58.3999 750 50 741.6 50 724.8 cv
50 741.6 41.6001 750 24.7998 750 cv
41.6001 750 50 758.4 50 775.2 cv
50 758.4 58.3999 750 75.2002 750 cv
cp
92 750 mo
64 750 50 764 50 792 cv
50 764 36 750 8 750 cv
36 750 50 736 50 708 cv
50 736 64 750 92 750 cv
cp
f
77.6001 850 mo
59.2002 850 50 840.8 50 822.4 cv
50 840.8 40.7998 850 22.3999 850 cv
40.7998 850 50 859.2 50 877.6 cv
50 859.2 59.2002 850 77.6001 850 cv
cp
96 850 mo
65.3335 850 50 865.333 50 896 cv
50 865.333 34.6665 850 4 850 cv
34.6665 850 50 834.667 50 804 cv
50 834.667 65.3335 850 96 850 cv
cp
f
80 950 mo
60 950 50 940 50 920 cv
50 940 40 950 20 950 cv
40 950 50 960 50 980 cv
50 960 60 950 80 950 cv
cp
100 950 mo
66.6665 950 50 966.667 50 1000 cv
50 966.667 33.3335 950 0 950 cv
33.3335 950 50 933.333 50 900 cv
50 933.333 66.6665 950 100 950 cv
cp
f
158.4 50 mo
152.8 50 150 47.2002 150 41.6001 cv
150 47.2002 147.2 50 141.6 50 cv
147.2 50 150 52.7998 150 58.3999 cv
150 52.7998 152.8 50 158.4 50 cv
cp
164 50 mo
154.667 50 150 54.6665 150 64 cv
150 54.6665 145.333 50 136 50 cv
145.333 50 150 45.3335 150 36 cv
150 45.3335 154.667 50 164 50 cv
cp
f
160.8 150 mo
153.6 150 150 146.4 150 139.2 cv
150 146.4 146.4 150 139.2 150 cv
146.4 150 150 153.6 150 160.8 cv
150 153.6 153.6 150 160.8 150 cv
cp
168 150 mo
156 150 150 156 150 168 cv
150 156 144 150 132 150 cv
144 150 150 144 150 132 cv
150 144 156 150 168 150 cv
cp
f
163.2 250 mo
154.4 250 150 245.6 150 236.8 cv
150 245.6 145.6 250 136.8 250 cv
145.6 250 150 254.4 150 263.2 cv
150 254.4 154.4 250 163.2 250 cv
cp
172 250 mo
157.333 250 150 257.333 150 272 cv
150 257.333 142.667 250 128 250 cv
142.667 250 150 242.667 150 228 cv
150 242.667 157.333 250 172 250 cv
cp
f
165.6 350 mo
155.2 350 150 344.8 150 334.4 cv
150 344.8 144.8 350 134.4 350 cv
144.8 350 150 355.2 150 365.6 cv
150 355.2 155.2 350 165.6 350 cv
cp
176 350 mo
158.667 350 150 358.667 150 376 cv
150 358.667 141.333 350 124 350 cv
141.333 350 150 341.333 150 324 cv
150 341.333 158.667 350 176 350 cv
cp
f
168 450 mo
156 450 150 444 150 432 cv
150 444 144 450 132 450 cv
144 450 150 456 150 468 cv
150 456 156 450 168 450 cv
cp
180 450 mo
160 450 150 460 150 480 cv
150 460 140 450 120 450 cv
140 450 150 440 150 420 cv
150 440 160 450 180 450 cv
cp
f
170.4 550 mo
156.8 550 150 543.2 150 529.6 cv
150 543.2 143.2 550 129.6 550 cv
143.2 550 150 556.8 150 570.4 cv
150 556.8 156.8 550 170.4 550 cv
cp
184 550 mo
161.333 550 150 561.333 150 584 cv
150 561.333 138.667 550 116 550 cv
138.667 550 150 538.667 150 516 cv
150 538.667 161.333 550 184 550 cv
cp
f
172.8 650 mo
157.6 650 150 642.4 150 627.2 cv
150 642.4 142.4 650 127.2 650 cv
142.4 650 150 657.6 150 672.8 cv
150 657.6 157.6 650 172.8 650 cv
cp
188 650 mo
162.667 650 150 662.667 150 688 cv
150 662.667 137.333 650 112 650 cv
137.333 650 150 637.333 150 612 cv
150 637.333 162.667 650 188 650 cv
cp
f
175.2 750 mo
158.4 750 150 741.6 150 724.8 cv
150 741.6 141.6 750 124.8 750 cv
141.6 750 150 758.4 150 775.2 cv
150 758.4 158.4 750 175.2 750 cv
cp
192 750 mo
164 750 150 764 150 792 cv
150 764 136 750 108 750 cv
136 750 150 736 150 708 cv
150 736 164 750 192 750 cv
cp
f
177.6 850 mo
159.2 850 150 840.8 150 822.4 cv
150 840.8 140.8 850 122.4 850 cv
140.8 850 150 859.2 150 877.6 cv
150 859.2 159.2 850 177.6 850 cv
cp
196 850 mo
165.333 850 150 865.333 150 896 cv
150 865.333 134.667 850 104 850 cv
134.667 850 150 834.667 150 804 cv
150 834.667 165.333 850 196 850 cv
cp
f
180 950 mo
160 950 150 940 150 920 cv
150 940 140 950 120 950 cv
140 950 150 960 150 980 cv
150 960 160 950 180 950 cv
cp
200 950 mo
166.667 950 150 966.667 150 1000 cv
150 966.667 133.333 950 100 950 cv
133.333 950 150 933.333 150 900 cv
150 933.333 166.667 950 200 950 cv
cp
f
258.4 50 mo
252.8 50 250 47.2002 250 41.6001 cv
250 47.2002 247.2 50 241.6 50 cv
247.2 50 250 52.7998 250 58.3999 cv
250 52.7998 252.8 50 258.4 50 cv
cp
264 50 mo
254.667 50 250 54.6665 250 64 cv
250 54.6665 245.333 50 236 50 cv
245.333 50 250 45.3335 250 36 cv
250 45.3335 254.667 50 264 50 cv
cp
f
260.8 150 mo
253.6 150 250 146.4 250 139.2 cv
250 146.4 246.4 150 239.2 150 cv
246.4 150 250 153.6 250 160.8 cv
250 153.6 253.6 150 260.8 150 cv
cp
268 150 mo
256 150 250 156 250 168 cv
250 156 244 150 232 150 cv
244 150 250 144 250 132 cv
250 144 256 150 268 150 cv
cp
f
263.2 250 mo
254.4 250 250 245.6 250 236.8 cv
250 245.6 245.6 250 236.8 250 cv
245.6 250 250 254.4 250 263.2 cv
250 254.4 254.4 250 263.2 250 cv
cp
272 250 mo
257.333 250 250 257.333 250 272 cv
250 257.333 242.667 250 228 250 cv
242.667 250 250 242.667 250 228 cv
250 242.667 257.333 250 272 250 cv
cp
f
265.6 350 mo
255.2 350 250 344.8 250 334.4 cv
250 344.8 244.8 350 234.4 350 cv
244.8 350 250 355.2 250 365.6 cv
250 355.2 255.2 350 265.6 350 cv
cp
276 350 mo
258.667 350 250 358.667 250 376 cv
250 358.667 241.333 350 224 350 cv
241.333 350 250 341.333 250 324 cv
250 341.333 258.667 350 276 350 cv
cp
f
268 450 mo
256 450 250 444 250 432 cv
250 444 244 450 232 450 cv
244 450 250 456 250 468 cv
250 456 256 450 268 450 cv
cp
280 450 mo
260 450 250 460 250 480 cv
250 460 240 450 220 450 cv
240 450 250 440 250 420 cv
250 440 260 450 280 450 cv
cp
f
270.4 550 mo
256.8 550 250 543.2 250 529.6 cv
250 543.2 243.2 550 229.6 550 cv
243.2 550 250 556.8 250 570.4 cv
250 556.8 256.8 550 270.4 550 cv
cp
284 550 mo
261.333 550 250 561.333 250 584 cv
250 561.333 238.667 550 216 550 cv
238.667 550 250 538.667 250 516 cv
250 538.667 261.333 550 284 550 cv
cp
f
272.8 650 mo
257.6 650 250 642.4 250 627.2 cv
250 642.4 242.4 650 227.2 650 cv
242.4 650 250 657.6 250 672.8 cv
250 657.6 257.6 650 272.8 650 cv
cp
288 650 mo
262.667 650 250 662.667 250 688 cv
250 662.667 237.333 650 212 650 cv
237.333 650 250 637.333 250 612 cv
250 637.333 262.667 650 288 650 cv
cp
f
275.2 750 mo
258.4 750 250 741.6 250 724.8 cv
250 741.6 241.6 750 224.8 750 cv
241.6 750 250 758.4 250 775.2 cv
250 758.4 258.4 750 275.2 750 cv
cp
292 750 mo
264 750 250 764 250 792 cv
250 764 236 750 208 750 cv
236 750 250 736 250 708 cv
250 736 264 750 292 750 cv
cp
f
277.6 850 mo
259.2 850 250 840.8 250 822.4 cv
250 840.8 240.8 850 222.4 850 cv
240.8 850 250 859.2 250 877.6 cv
250 859.2 259.2 850 277.6 850 cv
cp
296 850 mo
265.333 850 250 865.333 250 896 cv
250 865.333 234.667 850 204 850 cv
234.667 850 250 834.667 250 804 cv
250 834.667 265.333 850 296 850 cv
cp
f
280 950 mo
260 950 250 940 250 920 cv
250 940 240 950 220 950 cv
240 950 250 960 250 980 cv
250 960 260 950 280 950 cv
cp
300 950 mo
266.667 950 250 966.667 250 1000 cv
250 966.667 233.333 950 200 950 cv
233.333 950 250 933.333 250 900 cv
250 933.333 266.667 950 300 950 cv
cp
f
358.4 50 mo
352.8 50 350 47.2002 350 41.6001 cv
350 47.2002 347.2 50 341.6 50 cv
347.2 50 350 52.7998 350 58.3999 cv
350 52.7998 352.8 50 358.4 50 cv
cp
364 50 mo
354.667 50 350 54.6665 350 64 cv
350 54.6665 345.333 50 336 50 cv
345.333 50 350 45.3335 350 36 cv
350 45.3335 354.667 50 364 50 cv
cp
f
360.8 150 mo
353.6 150 350 146.4 350 139.2 cv
350 146.4 346.4 150 339.2 150 cv
346.4 150 350 153.6 350 160.8 cv
350 153.6 353.6 150 360.8 150 cv
cp
368 150 mo
356 150 350 156 350 168 cv
350 156 344 150 332 150 cv
344 150 350 144 350 132 cv
350 144 356 150 368 150 cv
cp
f
363.2 250 mo
354.4 250 350 245.6 350 236.8 cv
350 245.6 345.6 250 336.8 250 cv
345.6 250 350 254.4 350 263.2 cv
350 254.4 354.4 250 363.2 250 cv
cp
372 250 mo
357.333 250 350 257.333 350 272 cv
350 257.333 342.667 250 328 250 cv
342.667 250 350 242.667 350 228 cv
350 242.667 357.333 250 372 250 cv
cp
f
365.6 350 mo
355.2 350 350 344.8 350 334.4 cv
350 344.8 344.8 350 334.4 350 cv
344.8 350 350 355.2 350 365.6 cv
350 355.2 355.2 350 365.6 350 cv
cp
376 350 mo
358.667 350 350 358.667 350 376 cv
350 358.667 341.333 350 324 350 cv
341.333 350 350 341.333 350 324 cv
350 341.333 358.667 350 376 350 cv
cp
f
368 450 mo
356 450 350 444 350 432 cv
350 444 344 450 332 450 cv
344 450 350 456 350 468 cv
350 456 356 450 368 450 cv
cp
380 450 mo
360 450 350 460 350 480 cv
350 460 340 450 320 450 cv
340 450 350 440 350 420 cv
350 440 360 450 380 450 cv
cp
f
370.4 550 mo
356.8 550 350 543.2 350 529.6 cv
350 543.2 343.2 550 329.6 550 cv
343.2 550 350 556.8 350 570.4 cv
350 556.8 356.8 550 370.4 550 cv
cp
384 550 mo
361.333 550 350 561.333 350 584 cv
350 561.333 338.667 550 316 550 cv
338.667 550 350 538.667 350 516 cv
350 538.667 361.333 550 384 550 cv
cp
f
372.8 650 mo
357.6 650 350 642.4 350 627.2 cv
350 642.4 342.4 650 327.2 650 cv
342.4 650 350 657.6 350 672.8 cv
350 657.6 357.6 650 372.8 650 cv
cp
388 650 mo
362.667 650 350 662.667 350 688 cv
350 662.667 337.333 650 312 650 cv
337.333 650 350 637.333 350 612 cv
350 637.333 362.667 650 388 650 cv
cp
f
375.2 750 mo
358.4 750 350 741.6 350 724.8 cv
350 741.6 341.6 750 324.8 750 cv
341.6 750 350 758.4 350 775.2 cv
350 758.4 358.4 750 375.2 750 cv
cp
392 750 mo
364 750 350 764 350 792 cv
350 764 336 750 308 750 cv
336 750 350 736 350 708 cv
350 736 364 750 392 750 cv
cp
f
377.6 850 mo
359.2 850 350 840.8 350 822.4 cv
350 840.8 340.8 850 322.4 850 cv
340.8 850 350 859.2 350 877.6 cv
350 859.2 359.2 850 377.6 850 cv
cp
396 850 mo
365.333 850 350 865.333 350 896 cv
350 865.333 334.667 850 304 850 cv
334.667 850 350 834.667 350 804 cv
350 834.667 365.333 850 396 850 cv
cp
f
380 950 mo
360 950 350 940 350 920 cv
350 940 340 950 320 950 cv
340 950 350 960 350 980 cv
350 960 360 950 380 950 cv
cp
400 950 mo
366.667 950 350 966.667 350 1000 cv
350 966.667 333.333 950 300 950 cv
333.333 950 350 933.333 350 900 cv
350 933.333 366.667 950 400 950 cv
cp
f
458.4 50 mo
452.8 50 450 47.2002 450 41.6001 cv
450 47.2002 447.2 50 441.6 50 cv
447.2 50 450 52.7998 450 58.3999 cv
450 52.7998 452.8 50 458.4 50 cv
cp
464 50 mo
454.667 50 450 54.6665 450 64 cv
450 54.6665 445.333 50 436 50 cv
445.333 50 450 45.3335 450 36 cv
450 45.3335 454.667 50 464 50 cv
cp
f
460.8 150 mo
453.6 150 450 146.4 450 139.2 cv
450 146.4 446.4 150 439.2 150 cv
446.4 150 450 153.6 450 160.8 cv
450 153.6 453.6 150 460.8 150 cv
cp
468 150 mo
456 150 450 156 450 168 cv
450 156 444 150 432 150 cv
444 150 450 144 450 132 cv
450 144 456 150 468 150 cv
cp
f
463.2 250 mo
454.4 250 450 245.6 450 236.8 cv
450 245.6 445.6 250 436.8 250 cv
445.6 250 450 254.4 450 263.2 cv
450 254.4 454.4 250 463.2 250 cv
cp
472 250 mo
457.333 250 450 257.333 450 272 cv
450 257.333 442.667 250 428 250 cv
442.667 250 450 242.667 450 228 cv
450 242.667 457.333 250 472 250 cv
cp
f
465.6 350 mo
455.2 350 450 344.8 450 334.4 cv
450 344.8 444.8 350 434.4 350 cv
444.8 350 450 355.2 450 365.6 cv
450 355.2 455.2 350 465.6 350 cv
cp
476 350 mo
458.667 350 450 358.667 450 376 cv
450 358.667 441.333 350 424 350 cv
441.333 350 450 341.333 450 324 cv
450 341.333 458.667 350 476 350 cv
cp
f
468 450 mo
456 450 450 444 450 432 cv
450 444 444 450 432 450 cv
444 450 450 456 450 468 cv
450 456 456 450 468 450 cv
cp
480 450 mo
460 450 450 460 450 480 cv
450 460 440 450 420 450 cv
440 450 450 440 450 420 cv
450 440 460 450 480 450 cv
cp
f
470.4 550 mo
456.8 550 450 543.2 450 529.6 cv
450 543.2 443.2 550 429.6 550 cv
443.2 550 450 556.8 450 570.4 cv
450 556.8 456.8 550 470.4 550 cv
cp
484 550 mo
461.333 550 450 561.333 450 584 cv
450 561.333 438.667 550 416 550 cv
438.667 550 450 538.667 450 516 cv
450 538.667 461.333 550 484 550 cv
cp
f
472.8 650 mo
457.6 650 450 642.4 450 627.2 cv
450 642.4 442.4 650 427.2 650 cv
442.4 650 450 657.6 450 672.8 cv
450 657.6 457.6 650 472.8 650 cv
cp
488 650 mo
462.667 650 450 662.667 450 688 cv
450 662.667 437.333 650 412 650 cv
437.333 650 450 637.333 450 612 cv
450 637.333 462.667 650 488 650 cv
cp
f
475.2 750 mo
458.4 750 450 741.6 450 724.8 cv
450 741.6 441.6 750 424.8 750 cv
441.6 750 450 758.4 450 775.2 cv
450 758.4 458.4 750 475.2 750 cv
cp
492 750 mo
464 750 450 764 450 792 cv
450 764 436 750 408 750 cv
436 750 450 736 450 708 cv
450 736 464 750 492 750 cv
cp
f
477.6 850 mo
459.2 850 450 840.8 450 822.4 cv
450 840.8 440.8 850 422.4 850 cv
440.8 850 450 859.2 450 877.6 cv
450 859.2 459.2 850 477.6 850 cv
cp
496 850 mo
465.333 850 450 865.333 450 896 cv
450 865.333 434.667 850 404 850 cv
434.667 850 450 834.667 450 804 cv
450 834.667 465.333 850 496 850 cv
cp
f
480 950 mo
460 950 450 940 450 920 cv
450 940 440 950 420 950 cv
440 950 450 960 450 980 cv
450 960 460 950 480 950 cv
cp
500 950 mo
466.667 950 450 966.667 450 1000 cv
450 966.667 433.333 950 400 950 cv
433.333 950 450 933.333 450 900 cv
450 933.333 466.667 950 500 950 cv
cp
f
558.4 50 mo
552.8 50 550 47.2002 550 41.6001 cv
550 47.2002 547.2 50 541.6 50 cv
547.2 50 550 52.7998 550 58.3999 cv
550 52.7998 552.8 50 558.4 50 cv
cp
564 50 mo
554.667 50 550 54.6665 550 64 cv
550 54.6665 545.333 50 536 50 cv
545.333 50 550 45.3335 550 36 cv
550 45.3335 554.667 50 564 50 cv
cp
f
560.8 150 mo
553.6 150 550 146.4 550 139.2 cv
550 146.4 546.4 150 539.2 150 cv
546.4 150 550 153.6 550 160.8 cv
550 153.6 553.6 150 560.8 150 cv
cp
568 150 mo
556 150 550 156 550 168 cv
550 156 544 150 532 150 cv
544 150 550 144 550 132 cv
550 144 556 150 568 150 cv
cp
f
563.2 250 mo
554.4 250 550 245.6 550 236.8 cv
550 245.6 545.6 250 536.8 250 cv
545.6 250 550 254.4 550 263.2 cv
550 254.4 554.4 250 563.2 250 cv
cp
572 250 mo
557.333 250 550 257.333 550 272 cv
550 257.333 542.667 250 528 250 cv
542.667 250 550 242.667 550 228 cv
550 242.667 557.333 250 572 250 cv
cp
f
565.6 350 mo
555.2 350 550 344.8 550 334.4 cv
550 344.8 544.8 350 534.4 350 cv
544.8 350 550 355.2 550 365.6 cv
550 355.2 555.2 350 565.6 350 cv
cp
576 350 mo
558.667 350 550 358.667 550 376 cv
550 358.667 541.333 350 524 350 cv
541.333 350 550 341.333 550 324 cv
550 341.333 558.667 350 576 350 cv
cp
f
568 450 mo
556 450 550 444 550 432 cv
550 444 544 450 532 450 cv
544 450 550 456 550 468 cv
550 456 556 450 568 450 cv
cp
580 450 mo
560 450 550 460 550 480 cv
550 460 540 450 520 450 cv
540 450 550 440 550 420 cv
550 440 560 450 580 450 cv
cp
f
570.4 550 mo
556.8 550 550 543.2 550 529.6 cv
550 543.2 543.2 550 529.6 550 cv
543.2 550 550 556.8 550 570.4 cv
550 556.8 556.8 550 570.4 550 cv
cp
584 550 mo
561.333 550 550 561.333 550 584 cv
550 561.333 538.667 550 516 550 cv
538.667 550 550 538.667 550 516 cv
550 538.667 561.333 550 584 550 cv
cp
f
572.8 650 mo
557.6 650 550 642.4 550 627.2 cv
550 642.4 542.4 650 527.2 650 cv
542.4 650 550 657.6 550 672.8 cv
550 657.6 557.6 650 572.8 650 cv
cp
588 650 mo
562.667 650 550 662.667 550 688 cv
550 662.667 537.333 650 512 650 cv
537.333 650 550 637.333 550 612 cv
550 637.333 562.667 650 588 650 cv
cp
f
575.2 750 mo
558.4 750 550 741.6 550 724.8 cv
550 741.6 541.6 750 524.8 750 cv
541.6 750 550 758.4 550 775.2 cv
550 758.4 558.4 750 575.2 750 cv
cp
592 750 mo
564 750 550 764 550 792 cv
550 764 536 750 508 750 cv
536 750 550 736 550 708 cv
550 736 564 750 592 750 cv
cp
f
577.6 850 mo
559.2 850 550 840.8 550 822.4 cv
550 840.8 540.8 850 522.4 850 cv
540.8 850 550 859.2 550 877.6 cv
550 859.2 559.2 850 577.6 850 cv
cp
596 850 mo
565.333 850 550 865.333 550 896 cv
550 865.333 534.667 850 504 850 cv
534.667 850 550 834.667 550 804 cv
550 834.667 565.333 850 596 850 cv
cp
f
580 950 mo
560 950 550 940 550 920 cv
550 940 540 950 520 950 cv
540 950 550 960 550 980 cv
550 960 560 950 580 950 cv
cp
600 950 mo
566.667 950 550 966.667 550 1000 cv
550 966.667 533.333 950 500 950 cv
533.333 950 550 933.333 550 900 cv
550 933.333 566.667 950 600 950 cv
cp
f
658.4 50 mo
652.8 50 650 47.2002 650 41.6001 cv
650 47.2002 647.2 50 641.6 50 cv
647.2 50 650 52.7998 650 58.3999 cv
650 52.7998 652.8 50 658.4 50 cv
cp
664 50 mo
654.667 50 650 54.6665 650 64 cv
650 54.6665 645.333 50 636 50 cv
645.333 50 650 45.3335 650 36 cv
650 45.3335 654.667 50 664 50 cv
cp
f
660.8 150 mo
653.6 150 650 146.4 650 139.2 cv
650 146.4 646.4 150 639.2 150 cv
646.4 150 650 153.6 650 160.8 cv
650 153.6 653.6 150 660.8 150 cv
cp
668 150 mo
656 150 650 156 650 168 cv
650 156 644 150 632 150 cv
644 150 650 144 650 132 cv
650 144 656 150 668 150 cv
cp
f
663.2 250 mo
654.4 250 650 245.6 650 236.8 cv
650 245.6 645.6 250 636.8 250 cv
645.6 250 650 254.4 650 263.2 cv
650 254.4 654.4 250 663.2 250 cv
cp
672 250 mo
657.333 250 650 257.333 650 272 cv
650 257.333 642.667 250 628 250 cv
642.667 250 650 242.667 650 228 cv
650 242.667 657.333 250 672 250 cv
cp
f
665.6 350 mo
655.2 350 650 344.8 650 334.4 cv
650 344.8 644.8 350 634.4 350 cv
644.8 350 650 355.2 650 365.6 cv
650 355.2 655.2 350 665.6 350 cv
cp
676 350 mo
658.667 350 650 358.667 650 376 cv
650 358.667 641.333 350 624 350 cv
641.333 350 650 341.333 650 324 cv
650 341.333 658.667 350 676 350 cv
cp
f
668 450 mo
656 450 650 444 650 432 cv
650 444 644 450 632 450 cv
644 450 650 456 650 468 cv
650 456 656 450 668 450 cv
cp
680 450 mo
660 450 650 460 650 480 cv
650 460 640 450 620 450 cv
640 450 650 440 650 420 cv
650 440 660 450 680 450 cv
cp
f
670.4 550 mo
656.8 550 650 543.2 650 529.6 cv
650 543.2 643.2 550 629.6 550 cv
643.2 550 650 556.8 650 570.4 cv
650 556.8 656.8 550 670.4 550 cv
cp
684 550 mo
661.333 550 650 561.333 650 584 cv
650 561.333 638.667 550 616 550 cv
638.667 550 650 538.667 650 516 cv
650 538.667 661.333 550 684 550 cv
cp
f
672.8 650 mo
657.6 650 650 642.4 650 627.2 cv
650 642.4 642.4 650 627.2 650 cv
642.4 650 650 657.6 650 672.8 cv
650 657.6 657.6 650 672.8 650 cv
cp
688 650 mo
662.667 650 650 662.667 650 688 cv
650 662.667 637.333 650 612 650 cv
637.333 650 650 637.333 650 612 cv
650 637.333 662.667 650 688 650 cv
cp
f
675.2 750 mo
658.4 750 650 741.6 650 724.8 cv
650 741.6 641.6 750 624.8 750 cv
641.6 750 650 758.4 650 775.2 cv
650 758.4 658.4 750 675.2 750 cv
cp
692 750 mo
664 750 650 764 650 792 cv
650 764 636 750 608 750 cv
636 750 650 736 650 708 cv
650 736 664 750 692 750 cv
cp
f
677.6 850 mo
659.2 850 650 840.8 650 822.4 cv
650 840.8 640.8 850 622.4 850 cv
640.8 850 650 859.2 650 877.6 cv
650 859.2 659.2 850 677.6 850 cv
cp
696 850 mo
665.333 850 650 865.333 650 896 cv
650 865.333 634.667 850 604 850 cv
634.667 850 650 834.667 650 804 cv
650 834.667 665.333 850 696 850 cv
cp
f
680 950 mo
660 950 650 940 650 920 cv
650 940 640 950 620 950 cv
640 950 650 960 650 980 cv
650 960 660 950 680 950 cv
cp
700 950 mo
666.667 950 650 966.667 650 1000 cv
650 966.667 633.333 950 600 950 cv
633.333 950 650 933.333 650 900 cv
650 933.333 666.667 950 700 950 cv
cp
f
758.4 50 mo
752.8 50 750 47.2002 750 41.6001 cv
750 47.2002 747.2 50 741.6 50 cv
747.2 50 750 52.7998 750 58.3999 cv
750 52.7998 752.8 50 758.4 50 cv
cp
764 50 mo
754.667 50 750 54.6665 750 64 cv
750 54.6665 745.333 50 736 50 cv
745.333 50 750 45.3335 750 36 cv
750 45.3335 754.667 50 764 50 cv
cp
f
760.8 150 mo
753.6 150 750 146.4 750 139.2 cv
750 146.4 746.4 150 739.2 150 cv
746.4 150 750 153.6 750 160.8 cv
750 153.6 753.6 150 760.8 150 cv
cp
768 150 mo
756 150 750 156 750 168 cv
750 156 744 150 732 150 cv
744 150 750 144 750 132 cv
750 144 756 150 768 150 cv
cp
f
763.2 250 mo
754.4 250 750 245.6 750 236.8 cv
750 245.6 745.6 250 736.8 250 cv
745.6 250 750 254.4 750 263.2 cv
750 254.4 754.4 250 763.2 250 cv
cp
772 250 mo
757.333 250 750 257.333 750 272 cv
750 257.333 742.667 250 728 250 cv
742.667 250 750 242.667 750 228 cv
750 242.667 757.333 250 772 250 cv
cp
f
765.6 350 mo
755.2 350 750 344.8 750 334.4 cv
750 344.8 744.8 350 734.4 350 cv
744.8 350 750 355.2 750 365.6 cv
750 355.2 755.2 350 765.6 350 cv
cp
776 350 mo
758.667 350 750 358.667 750 376 cv
750 358.667 741.333 350 724 350 cv
741.333 350 750 341.333 750 324 cv
750 341.333 758.667 350 776 350 cv
cp
f
768 450 mo
756 450 750 444 750 432 cv
750 444 744 450 732 450 cv
744 450 750 456 750 468 cv
750 456 756 450 768 450 cv
cp
780 450 mo
760 450 750 460 750 480 cv
750 460 740 450 720 450 cv
740 450 750 440 750 420 cv
750 440 760 450 780 450 cv
cp
f
770.4 550 mo
756.8 550 750 543.2 750 529.6 cv
750 543.2 743.2 550 729.6 550 cv
743.2 550 750 556.8 750 570.4 cv
750 556.8 756.8 550 770.4 550 cv
cp
784 550 mo
761.333 550 750 561.333 750 584 cv
750 561.333 738.667 550 716 550 cv
738.667 550 750 538.667 750 516 cv
750 538.667 761.333 550 784 550 cv
cp
f
772.8 650 mo
757.6 650 750 642.4 750 627.2 cv
750 642.4 742.4 650 727.2 650 cv
742.4 650 750 657.6 750 672.8 cv
750 657.6 757.6 650 772.8 650 cv
cp
788 650 mo
762.667 650 750 662.667 750 688 cv
750 662.667 737.333 650 712 650 cv
737.333 650 750 637.333 750 612 cv
750 637.333 762.667 650 788 650 cv
cp
f
775.2 750 mo
758.4 750 750 741.6 750 724.8 cv
750 741.6 741.6 750 724.8 750 cv
741.6 750 750 758.4 750 775.2 cv
750 758.4 758.4 750 775.2 750 cv
cp
792 750 mo
764 750 750 764 750 792 cv
750 764 736 750 708 750 cv
736 750 750 736 750 708 cv
750 736 764 750 792 750 cv
cp
f
777.6 850 mo
759.2 850 750 840.8 750 822.4 cv
750 840.8 740.8 850 722.4 850 cv
740.8 850 750 859.2 750 877.6 cv
750 859.2 759.2 850 777.6 850 cv
cp
796 850 mo
765.333 850 750 865.333 750 896 cv
750 865.333 734.667 850 704 850 cv
734.667 850 750 834.667 750 804 cv
750 834.667 765.333 850 796 850 cv
cp
f
780 950 mo
760 950 750 940 750 920 cv
750 940 740 950 720 950 cv
740 950 750 960 750 980 cv
750 960 760 950 780 950 cv
cp
800 950 mo
766.667 950 750 966.667 750 1000 cv
750 966.667 733.333 950 700 950 cv
733.333 950 750 933.333 750 900 cv
750 933.333 766.667 950 800 950 cv
cp
f
858.4 50 mo
852.8 50 850 47.2002 850 41.6001 cv
850 47.2002 847.2 50 841.6 50 cv
847.2 50 850 52.7998 850 58.3999 cv
850 52.7998 852.8 50 858.4 50 cv
cp
864 50 mo
854.667 50 850 54.6665 850 64 cv
850 54.6665 845.333 50 836 50 cv
845.333 50 850 45.3335 850 36 cv
850 45.3335 854.667 50 864 50 cv
cp
f
860.8 150 mo
853.6 150 850 146.4 850 139.2 cv
850 146.4 846.4 150 839.2 150 cv
846.4 150 850 153.6 850 160.8 cv
850 153.6 853.6 150 860.8 150 cv
cp
868 150 mo
856 150 850 156 850 168 cv
850 156 844 150 832 150 cv
844 150 850 144 850 132 cv
850 144 856 150 868 150 cv
cp
f
863.2 250 mo
854.4 250 850 245.6 850 236.8 cv
850 245.6 845.6 250 836.8 250 cv
845.6 250 850 254.4 850 263.2 cv
850 254.4 854.4 250 863.2 250 cv
cp
872 250 mo
857.333 250 850 257.333 850 272 cv
850 257.333 842.667 250 828 250 cv
842.667 250 850 242.667 850 228 cv
850 242.667 857.333 250 872 250 cv
cp
f
865.6 350 mo
855.2 350 850 344.8 850 334.4 cv
850 344.8 844.8 350 834.4 350 cv
844.8 350 850 355.2 850 365.6 cv
850 355.2 855.2 350 865.6 350 cv
cp
876 350 mo
858.667 350 850 358.667 850 376 cv
850 358.667 841.333 350 824 350 cv
841.333 350 850 341.333 850 324 cv
850 341.333 858.667 350 876 350 cv
cp
f
868 450 mo
856 450 850 444 850 432 cv
850 444 844 450 832 450 cv
844 450 850 456 850 468 cv
850 456 856 450 868 450 cv
cp
880 450 mo
860 450 850 460 850 480 cv
850 460 840 450 820 450 cv
840 450 850 440 850 420 cv
850 440 860 450 880 450 cv
cp
f
870.4 550 mo
856.8 550 850 543.2 850 529.6 cv
850 543.2 843.2 550 829.6 550 cv
843.2 550 850 556.8 850 570.4 cv
850 556.8 856.8 550 870.4 550 cv
cp
884 550 mo
861.333 550 850 561.333 850 584 cv
850 561.333 838.667 550 816 550 cv
838.667 550 850 538.667 850 516 cv
850 538.667 861.333 550 884 550 cv
cp
f
872.8 650 mo
857.6 650 850 642.4 850 627.2 cv
850 642.4 842.4 650 827.2 650 cv
842.4 650 850 657.6 850 672.8 cv
850 657.6 857.6 650 872.8 650 cv
cp
888 650 mo
862.667 650 850 662.667 850 688 cv
850 662.667 837.333 650 812 650 cv
837.333 650 850 637.333 850 612 cv
850 637.333 862.667 650 888 650 cv
cp
f
875.2 750 mo
858.4 750 850 741.6 850 724.8 cv
850 741.6 841.6 750 824.8 750 cv
841.6 750 850 758.4 850 775.2 cv
850 758.4 858.4 750 875.2 750 cv
cp
892 750 mo
864 750 850 764 850 792 cv
850 764 836 750 808 750 cv
836 750 850 736 850 708 cv
850 736 864 750 892 750 cv
cp
f
877.6 850 mo
859.2 850 850 840.8 850 822.4 cv
850 840.8 840.8 850 822.4 850 cv
840.8 850 850 859.2 850 877.6 cv
850 859.2 859.2 850 877.6 850 cv
cp
896 850 mo
865.333 850 850 865.333 850 896 cv
850 865.333 834.667 850 804 850 cv
834.667 850 850 834.667 850 804 cv
850 834.667 865.333 850 896 850 cv
cp
f
880 950 mo
860 950 850 940 850 920 cv
850 940 840 950 820 950 cv
840 950 850 960 850 980 cv
850 960 860 950 880 950 cv
cp
900 950 mo
866.667 950 850 966.667 850 1000 cv
850 966.667 833.333 950 800 950 cv
833.333 950 850 933.333 850 900 cv
850 933.333 866.667 950 900 950 cv
cp
f
958.4 50 mo
952.8 50 950 47.2002 950 41.6001 cv
950 47.2002 947.2 50 941.6 50 cv
947.2 50 950 52.7998 950 58.3999 cv
950 52.7998 952.8 50 958.4 50 cv
cp
964 50 mo
954.667 50 950 54.6665 950 64 cv
950 54.6665 945.333 50 936 50 cv
945.333 50 950 45.3335 950 36 cv
950 45.3335 954.667 50 964 50 cv
cp
f
960.8 150 mo
953.6 150 950 146.4 950 139.2 cv
950 146.4 946.4 150 939.2 150 cv
946.4 150 950 153.6 950 160.8 cv
950 153.6 953.6 150 960.8 150 cv
cp
968 150 mo
956 150 950 156 950 168 cv
950 156 944 150 932 150 cv
944 150 950 144 950 132 cv
950 144 956 150 968 150 cv
cp
f
963.2 250 mo
954.4 250 950 245.6 950 236.8 cv
950 245.6 945.6 250 936.8 250 cv
945.6 250 950 254.4 950 263.2 cv
950 254.4 954.4 250 963.2 250 cv
cp
972 250 mo
957.333 250 950 257.333 950 272 cv
950 257.333 942.667 250 928 250 cv
942.667 250 950 242.667 950 228 cv
950 242.667 957.333 250 972 250 cv
cp
f
965.6 350 mo
955.2 350 950 344.8 950 334.4 cv
950 344.8 944.8 350 934.4 350 cv
944.8 350 950 355.2 950 365.6 cv
950 355.2 955.2 350 965.6 350 cv
cp
976 350 mo
958.667 350 950 358.667 950 376 cv
950 358.667 941.333 350 924 350 cv
941.333 350 950 341.333 950 324 cv
950 341.333 958.667 350 976 350 cv
cp
f
968 450 mo
956 450 950 444 950 432 cv
950 444 944 450 932 450 cv
944 450 950 456 950 468 cv
950 456 956 450 968 450 cv
cp
980 450 mo
960 450 950 460 950 480 cv
950 460 940 450 920 450 cv
940 450 950 440 950 420 cv
950 440 960 450 980 450 cv
cp
f
970.4 550 mo
956.8 550 950 543.2 950 529.6 cv
950 543.2 943.2 550 929.6 550 cv
943.2 550 950 556.8 950 570.4 cv
950 556.8 956.8 550 970.4 550 cv
cp
984 550 mo
961.333 550 950 561.333 950 584 cv
950 561.333 938.667 550 916 550 cv
938.667 550 950 538.667 950 516 cv
950 538.667 961.333 550 984 550 cv
cp
f
972.8 650 mo
957.6 650 950 642.4 950 627.2 cv
950 642.4 942.4 650 927.2 650 cv
942.4 650 950 657.6 950 672.8 cv
950 657.6 957.6 650 972.8 650 cv
cp
988 650 mo
962.667 650 950 662.667 950 688 cv
950 662.667 937.333 650 912 650 cv
937.333 650 950 637.333 950 612 cv
950 637.333 962.667 650 988 650 cv
cp
f
975.2 750 mo
958.4 750 950 741.6 950 724.8 cv
950 741.6 941.6 750 924.8 750 cv
941.6 750 950 758.4 950 775.2 cv
950 758.4 958.4 750 975.2 750 cv
cp
992 750 mo
964 750 950 764 950 792 cv
950 764 936 750 908 750 cv
936 750 950 736 950 708 cv
950 736 964 750 992 750 cv
cp
f
977.6 850 mo
959.2 850 950 840.8 950 822.4 cv
950 840.8 940.8 850 922.4 850 cv
940.8 850 950 859.2 950 877.6 cv
950 859.2 959.2 850 977.6 850 cv
cp
996 850 mo
965.333 850 950 865.333 950 896 cv
950 865.333 934.667 850 904 850 cv
934.667 850 950 834.667 950 804 cv
950 834.667 965.333 850 996 850 cv
cp
f
980 950 mo
960 950 950 940 950 920 cv
950 940 940 950 920 950 cv
940 950 950 960 950 980 cv
950 960 960 950 980 950 cv
cp
1000 950 mo
966.667 950 950 966.667 950 1000 cv
950 966.667 933.333 950 900 950 cv
933.333 950 950 933.333 950 900 cv
950 933.333 966.667 950 1000 950 cv
cp
f
0 7.2002 mo
0 2.3999 2.3999 0 7.2002 0 cv
2.3999 0 0 -2.3999 0 -7.2002 cv
0 -2.3999 -2.3999 0 -7.2002 0 cv
-2.3999 0 0 2.3999 0 7.2002 cv
cp
0 12 mo
0 4 -4 0 -12 0 cv
-4 0 0 -4 0 -12 cv
0 -4 4 0 12 0 cv
4 0 0 4 0 12 cv
cp
f
0 109.6 mo
0 103.2 3.2002 100 9.6001 100 cv
3.2002 100 0 96.7998 0 90.3999 cv
0 96.7998 -3.2002 100 -9.6001 100 cv
-3.2002 100 0 103.2 0 109.6 cv
cp
0 116 mo
0 105.333 -5.3335 100 -16 100 cv
-5.3335 100 0 94.6665 0 84 cv
0 94.6665 5.3335 100 16 100 cv
5.3335 100 0 105.333 0 116 cv
cp
f
0 212 mo
0 204 4 200 12 200 cv
4 200 0 196 0 188 cv
0 196 -4 200 -12 200 cv
-4 200 0 204 0 212 cv
cp
0 220 mo
0 206.667 -6.6665 200 -20 200 cv
-6.6665 200 0 193.333 0 180 cv
0 193.333 6.6665 200 20 200 cv
6.6665 200 0 206.667 0 220 cv
cp
f
0 314.4 mo
0 304.8 4.7998 300 14.3999 300 cv
4.7998 300 0 295.2 0 285.6 cv
0 295.2 -4.7998 300 -14.3999 300 cv
-4.7998 300 0 304.8 0 314.4 cv
cp
0 324 mo
0 308 -8 300 -24 300 cv
-8 300 0 292 0 276 cv
0 292 8 300 24 300 cv
8 300 0 308 0 324 cv
cp
f
0 416.8 mo
0 405.6 5.6001 400 16.7998 400 cv
5.6001 400 0 394.4 0 383.2 cv
0 394.4 -5.6001 400 -16.7998 400 cv
-5.6001 400 0 405.6 0 416.8 cv
cp
0 428 mo
0 409.333 -9.3335 400 -28 400 cv
-9.3335 400 0 390.667 0 372 cv
0 390.667 9.3335 400 28 400 cv
9.3335 400 0 409.333 0 428 cv
cp
f
0 519.2 mo
0 506.4 6.3999 500 19.2002 500 cv
6.3999 500 0 493.6 0 480.8 cv
0 493.6 -6.3999 500 -19.2002 500 cv
-6.3999 500 0 506.4 0 519.2 cv
cp
0 532 mo
0 510.667 -10.6665 500 -32 500 cv
-10.6665 500 0 489.333 0 468 cv
0 489.333 10.6665 500 32 500 cv
10.6665 500 0 510.667 0 532 cv
cp
f
0 621.6 mo
0 607.2 7.2002 600 21.6001 600 cv
7.2002 600 0 592.8 0 578.4 cv
0 592.8 -7.2002 600 -21.6001 600 cv
-7.2002 600 0 607.2 0 621.6 cv
cp
0 636 mo
0 612 -12 600 -36 600 cv
-12 600 0 588 0 564 cv
0 588 12 600 36 600 cv
12 600 0 612 0 636 cv
cp
f
0 724 mo
0 708 8 700 24 700 cv
8 700 0 692 0 676 cv
0 692 -8 700 -24 700 cv
-8 700 0 708 0 724 cv
cp
0 740 mo
0 713.333 -13.3335 700 -40 700 cv
-13.3335 700 0 686.667 0 660 cv
0 686.667 13.3335 700 40 700 cv
13.3335 700 0 713.333 0 740 cv
cp
f
0 826.4 mo
0 808.8 8.7998 800 26.3999 800 cv
8.7998 800 0 791.2 0 773.6 cv
0 791.2 -8.7998 800 -26.3999 800 cv
-8.7998 800 0 808.8 0 826.4 cv
cp
0 844 mo
0 814.667 -14.6665 800 -44 800 cv
-14.6665 800 0 785.333 0 756 cv
0 785.333 14.6665 800 44 800 cv
14.6665 800 0 814.667 0 844 cv
cp
f
0 928.8 mo
0 909.6 9.6001 900 28.7998 900 cv
9.6001 900 0 890.4 0 871.2 cv
0 890.4 -9.6001 900 -28.7998 900 cv
-9.6001 900 0 909.6 0 928.8 cv
cp
0 948 mo
0 916 -16 900 -48 900 cv
-16 900 0 884 0 852 cv
0 884 16 900 48 900 cv
16 900 0 916 0 948 cv
cp
f
0 1030 mo
0 1010 10 1000 30 1000 cv
10 1000 0 990 0 970 cv
0 990 -10 1000 -30 1000 cv
-10 1000 0 1010 0 1030 cv
cp
0 1050 mo
0 1016.67 -16.6665 1000 -50 1000 cv
-16.6665 1000 0 983.333 0 950 cv
0 983.333 16.6665 1000 50 1000 cv
16.6665 1000 0 1016.67 0 1050 cv
cp
f
100 7.2002 mo
100 2.3999 102.4 0 107.2 0 cv
102.4 0 100 -2.3999 100 -7.2002 cv
100 -2.3999 97.6001 0 92.7998 0 cv
97.6001 0 100 2.3999 100 7.2002 cv
cp
100 12 mo
100 4 96 0 88 0 cv
96 0 100 -4 100 -12 cv
100 -4 104 0 112 0 cv
104 0 100 4 100 12 cv
cp
f
100 109.6 mo
100 103.2 103.2 100 109.6 100 cv
103.2 100 100 96.7998 100 90.3999 cv
100 96.7998 96.7998 100 90.3999 100 cv
96.7998 100 100 103.2 100 109.6 cv
cp
100 116 mo
100 105.333 94.6665 100 84 100 cv
94.6665 100 100 94.6665 100 84 cv
100 94.6665 105.333 100 116 100 cv
105.333 100 100 105.333 100 116 cv
cp
f
100 212 mo
100 204 104 200 112 200 cv
104 200 100 196 100 188 cv
100 196 96 200 88 200 cv
96 200 100 204 100 212 cv
cp
100 220 mo
100 206.667 93.3335 200 80 200 cv
93.3335 200 100 193.333 100 180 cv
100 193.333 106.667 200 120 200 cv
106.667 200 100 206.667 100 220 cv
cp
f
100 314.4 mo
100 304.8 104.8 300 114.4 300 cv
104.8 300 100 295.2 100 285.6 cv
100 295.2 95.2002 300 85.6001 300 cv
95.2002 300 100 304.8 100 314.4 cv
cp
100 324 mo
100 308 92 300 76 300 cv
92 300 100 292 100 276 cv
100 292 108 300 124 300 cv
108 300 100 308 100 324 cv
cp
f
100 416.8 mo
100 405.6 105.6 400 116.8 400 cv
105.6 400 100 394.4 100 383.2 cv
100 394.4 94.3999 400 83.2002 400 cv
94.3999 400 100 405.6 100 416.8 cv
cp
100 428 mo
100 409.333 90.6665 400 72 400 cv
90.6665 400 100 390.667 100 372 cv
100 390.667 109.333 400 128 400 cv
109.333 400 100 409.333 100 428 cv
cp
f
100 519.2 mo
100 506.4 106.4 500 119.2 500 cv
106.4 500 100 493.6 100 480.8 cv
100 493.6 93.6001 500 80.7998 500 cv
93.6001 500 100 506.4 100 519.2 cv
cp
100 532 mo
100 510.667 89.3335 500 68 500 cv
89.3335 500 100 489.333 100 468 cv
100 489.333 110.667 500 132 500 cv
110.667 500 100 510.667 100 532 cv
cp
f
100 621.6 mo
100 607.2 107.2 600 121.6 600 cv
107.2 600 100 592.8 100 578.4 cv
100 592.8 92.7998 600 78.3999 600 cv
92.7998 600 100 607.2 100 621.6 cv
cp
100 636 mo
100 612 88 600 64 600 cv
88 600 100 588 100 564 cv
100 588 112 600 136 600 cv
112 600 100 612 100 636 cv
cp
f
100 724 mo
100 708 108 700 124 700 cv
108 700 100 692 100 676 cv
100 692 92 700 76 700 cv
92 700 100 708 100 724 cv
cp
100 740 mo
100 713.333 86.6665 700 60 700 cv
86.6665 700 100 686.667 100 660 cv
100 686.667 113.333 700 140 700 cv
113.333 700 100 713.333 100 740 cv
cp
f
100 826.4 mo
100 808.8 108.8 800 126.4 800 cv
108.8 800 100 791.2 100 773.6 cv
100 791.2 91.2002 800 73.6001 800 cv
91.2002 800 100 808.8 100 826.4 cv
cp
100 844 mo
100 814.667 85.3335 800 56 800 cv
85.3335 800 100 785.333 100 756 cv
100 785.333 114.667 800 144 800 cv
114.667 800 100 814.667 100 844 cv
cp
f
100 928.8 mo
100 909.6 109.6 900 128.8 900 cv
109.6 900 100 890.4 100 871.2 cv
100 890.4 90.3999 900 71.2002 900 cv
90.3999 900 100 909.6 100 928.8 cv
cp
100 948 mo
100 916 84 900 52 900 cv
84 900 100 884 100 852 cv
100 884 116 900 148 900 cv
116 900 100 916 100 948 cv
cp
f
100 1030 mo
100 1010 110 1000 130 1000 cv
110 1000 100 990 100 970 cv
100 990 90 1000 70 1000 cv
90 1000 100 1010 100 1030 cv
cp
100 1050 mo
100 1016.67 83.3335 1000 50 1000 cv
83.3335 1000 100 983.333 100 950 cv
100 983.333 116.667 1000 150 1000 cv
116.667 1000 100 1016.67 100 1050 cv
cp
f
200 7.2002 mo
200 2.3999 202.4 0 207.2 0 cv
202.4 0 200 -2.3999 200 -7.2002 cv
200 -2.3999 197.6 0 192.8 0 cv
197.6 0 200 2.3999 200 7.2002 cv
cp
200 12 mo
200 4 196 0 188 0 cv
196 0 200 -4 200 -12 cv
200 -4 204 0 212 0 cv
204 0 200 4 200 12 cv
cp
f
200 109.6 mo
200 103.2 203.2 100 209.6 100 cv
203.2 100 200 96.7998 200 90.3999 cv
200 96.7998 196.8 100 190.4 100 cv
196.8 100 200 103.2 200 109.6 cv
cp
200 116 mo
200 105.333 194.667 100 184 100 cv
194.667 100 200 94.6665 200 84 cv
200 94.6665 205.333 100 216 100 cv
205.333 100 200 105.333 200 116 cv
cp
f
200 212 mo
200 204 204 200 212 200 cv
204 200 200 196 200 188 cv
200 196 196 200 188 200 cv
196 200 200 204 200 212 cv
cp
200 220 mo
200 206.667 193.333 200 180 200 cv
193.333 200 200 193.333 200 180 cv
200 193.333 206.667 200 220 200 cv
206.667 200 200 206.667 200 220 cv
cp
f
200 314.4 mo
200 304.8 204.8 300 214.4 300 cv
204.8 300 200 295.2 200 285.6 cv
200 295.2 195.2 300 185.6 300 cv
195.2 300 200 304.8 200 314.4 cv
cp
200 324 mo
200 308 192 300 176 300 cv
192 300 200 292 200 276 cv
200 292 208 300 224 300 cv
208 300 200 308 200 324 cv
cp
f
200 416.8 mo
200 405.6 205.6 400 216.8 400 cv
205.6 400 200 394.4 200 383.2 cv
200 394.4 194.4 400 183.2 400 cv
194.4 400 200 405.6 200 416.8 cv
cp
200 428 mo
200 409.333 190.667 400 172 400 cv
190.667 400 200 390.667 200 372 cv
200 390.667 209.333 400 228 400 cv
209.333 400 200 409.333 200 428 cv
cp
f
200 519.2 mo
200 506.4 206.4 500 219.2 500 cv
206.4 500 200 493.6 200 480.8 cv
200 493.6 193.6 500 180.8 500 cv
193.6 500 200 506.4 200 519.2 cv
cp
200 532 mo
200 510.667 189.333 500 168 500 cv
189.333 500 200 489.333 200 468 cv
200 489.333 210.667 500 232 500 cv
210.667 500 200 510.667 200 532 cv
cp
f
200 621.6 mo
200 607.2 207.2 600 221.6 600 cv
207.2 600 200 592.8 200 578.4 cv
200 592.8 192.8 600 178.4 600 cv
192.8 600 200 607.2 200 621.6 cv
cp
200 636 mo
200 612 188 600 164 600 cv
188 600 200 588 200 564 cv
200 588 212 600 236 600 cv
212 600 200 612 200 636 cv
cp
f
200 724 mo
200 708 208 700 224 700 cv
208 700 200 692 200 676 cv
200 692 192 700 176 700 cv
192 700 200 708 200 724 cv
cp
200 740 mo
200 713.333 186.667 700 160 700 cv
186.667 700 200 686.667 200 660 cv
200 686.667 213.333 700 240 700 cv
213.333 700 200 713.333 200 740 cv
cp
f
200 826.4 mo
200 808.8 208.8 800 226.4 800 cv
208.8 800 200 791.2 200 773.6 cv
200 791.2 191.2 800 173.6 800 cv
191.2 800 200 808.8 200 826.4 cv
cp
200 844 mo
200 814.667 185.333 800 156 800 cv
185.333 800 200 785.333 200 756 cv
200 785.333 214.667 800 244 800 cv
214.667 800 200 814.667 200 844 cv
cp
f
200 928.8 mo
200 909.6 209.6 900 228.8 900 cv
209.6 900 200 890.4 200 871.2 cv
200 890.4 190.4 900 171.2 900 cv
190.4 900 200 909.6 200 928.8 cv
cp
200 948 mo
200 916 184 900 152 900 cv
184 900 200 884 200 852 cv
200 884 216 900 248 900 cv
216 900 200 916 200 948 cv
cp
f
200 1030 mo
200 1010 210 1000 230 1000 cv
210 1000 200 990 200 970 cv
200 990 190 1000 170 1000 cv
190 1000 200 1010 200 1030 cv
cp
200 1050 mo
200 1016.67 183.333 1000 150 1000 cv
183.333 1000 200 983.333 200 950 cv
200 983.333 216.667 1000 250 1000 cv
216.667 1000 200 1016.67 200 1050 cv
cp
f
300 7.2002 mo
300 2.3999 302.4 0 307.2 0 cv
302.4 0 300 -2.3999 300 -7.2002 cv
300 -2.3999 297.6 0 292.8 0 cv
297.6 0 300 2.3999 300 7.2002 cv
cp
300 12 mo
300 4 296 0 288 0 cv
296 0 300 -4 300 -12 cv
300 -4 304 0 312 0 cv
304 0 300 4 300 12 cv
cp
f
300 109.6 mo
300 103.2 303.2 100 309.6 100 cv
303.2 100 300 96.7998 300 90.3999 cv
300 96.7998 296.8 100 290.4 100 cv
296.8 100 300 103.2 300 109.6 cv
cp
300 116 mo
300 105.333 294.667 100 284 100 cv
294.667 100 300 94.6665 300 84 cv
300 94.6665 305.333 100 316 100 cv
305.333 100 300 105.333 300 116 cv
cp
f
300 212 mo
300 204 304 200 312 200 cv
304 200 300 196 300 188 cv
300 196 296 200 288 200 cv
296 200 300 204 300 212 cv
cp
300 220 mo
300 206.667 293.333 200 280 200 cv
293.333 200 300 193.333 300 180 cv
300 193.333 306.667 200 320 200 cv
306.667 200 300 206.667 300 220 cv
cp
f
300 314.4 mo
300 304.8 304.8 300 314.4 300 cv
304.8 300 300 295.2 300 285.6 cv
300 295.2 295.2 300 285.6 300 cv
295.2 300 300 304.8 300 314.4 cv
cp
300 324 mo
300 308 292 300 276 300 cv
292 300 300 292 300 276 cv
300 292 308 300 324 300 cv
308 300 300 308 300 324 cv
cp
f
300 416.8 mo
300 405.6 305.6 400 316.8 400 cv
305.6 400 300 394.4 300 383.2 cv
300 394.4 294.4 400 283.2 400 cv
294.4 400 300 405.6 300 416.8 cv
cp
300 428 mo
300 409.333 290.667 400 272 400 cv
290.667 400 300 390.667 300 372 cv
300 390.667 309.333 400 328 400 cv
309.333 400 300 409.333 300 428 cv
cp
f
300 519.2 mo
300 506.4 306.4 500 319.2 500 cv
306.4 500 300 493.6 300 480.8 cv
300 493.6 293.6 500 280.8 500 cv
293.6 500 300 506.4 300 519.2 cv
cp
300 532 mo
300 510.667 289.333 500 268 500 cv
289.333 500 300 489.333 300 468 cv
300 489.333 310.667 500 332 500 cv
310.667 500 300 510.667 300 532 cv
cp
f
300 621.6 mo
300 607.2 307.2 600 321.6 600 cv
307.2 600 300 592.8 300 578.4 cv
300 592.8 292.8 600 278.4 600 cv
292.8 600 300 607.2 300 621.6 cv
cp
300 636 mo
300 612 288 600 264 600 cv
288 600 300 588 300 564 cv
300 588 312 600 336 600 cv
312 600 300 612 300 636 cv
cp
f
300 724 mo
300 708 308 700 324 700 cv
308 700 300 692 300 676 cv
300 692 292 700 276 700 cv
292 700 300 708 300 724 cv
cp
300 740 mo
300 713.333 286.667 700 260 700 cv
286.667 700 300 686.667 300 660 cv
300 686.667 313.333 700 340 700 cv
313.333 700 300 713.333 300 740 cv
cp
f
300 826.4 mo
300 808.8 308.8 800 326.4 800 cv
308.8 800 300 791.2 300 773.6 cv
300 791.2 291.2 800 273.6 800 cv
291.2 800 300 808.8 300 826.4 cv
cp
300 844 mo
300 814.667 285.333 800 256 800 cv
285.333 800 300 785.333 300 756 cv
300 785.333 314.667 800 344 800 cv
314.667 800 300 814.667 300 844 cv
cp
f
300 928.8 mo
300 909.6 309.6 900 328.8 900 cv
309.6 900 300 890.4 300 871.2 cv
300 890.4 290.4 900 271.2 900 cv
290.4 900 300 909.6 300 928.8 cv
cp
300 948 mo
300 916 284 900 252 900 cv
284 900 300 884 300 852 cv
300 884 316 900 348 900 cv
316 900 300 916 300 948 cv
cp
f
300 1030 mo
300 1010 310 1000 330 1000 cv
310 1000 300 990 300 970 cv
300 990 290 1000 270 1000 cv
290 1000 300 1010 300 1030 cv
cp
300 1050 mo
300 1016.67 283.333 1000 250 1000 cv
283.333 1000 300 983.333 300 950 cv
300 983.333 316.667 1000 350 1000 cv
316.667 1000 300 1016.67 300 1050 cv
cp
f
400 7.2002 mo
400 2.3999 402.4 0 407.2 0 cv
402.4 0 400 -2.3999 400 -7.2002 cv
400 -2.3999 397.6 0 392.8 0 cv
397.6 0 400 2.3999 400 7.2002 cv
cp
400 12 mo
400 4 396 0 388 0 cv
396 0 400 -4 400 -12 cv
400 -4 404 0 412 0 cv
404 0 400 4 400 12 cv
cp
f
400 109.6 mo
400 103.2 403.2 100 409.6 100 cv
403.2 100 400 96.7998 400 90.3999 cv
400 96.7998 396.8 100 390.4 100 cv
396.8 100 400 103.2 400 109.6 cv
cp
400 116 mo
400 105.333 394.667 100 384 100 cv
394.667 100 400 94.6665 400 84 cv
400 94.6665 405.333 100 416 100 cv
405.333 100 400 105.333 400 116 cv
cp
f
400 212 mo
400 204 404 200 412 200 cv
404 200 400 196 400 188 cv
400 196 396 200 388 200 cv
396 200 400 204 400 212 cv
cp
400 220 mo
400 206.667 393.333 200 380 200 cv
393.333 200 400 193.333 400 180 cv
400 193.333 406.667 200 420 200 cv
406.667 200 400 206.667 400 220 cv
cp
f
400 314.4 mo
400 304.8 404.8 300 414.4 300 cv
404.8 300 400 295.2 400 285.6 cv
400 295.2 395.2 300 385.6 300 cv
395.2 300 400 304.8 400 314.4 cv
cp
400 324 mo
400 308 392 300 376 300 cv
392 300 400 292 400 276 cv
400 292 408 300 424 300 cv
408 300 400 308 400 324 cv
cp
f
400 416.8 mo
400 405.6 405.6 400 416.8 400 cv
405.6 400 400 394.4 400 383.2 cv
400 394.4 394.4 400 383.2 400 cv
394.4 400 400 405.6 400 416.8 cv
cp
400 428 mo
400 409.333 390.667 400 372 400 cv
390.667 400 400 390.667 400 372 cv
400 390.667 409.333 400 428 400 cv
409.333 400 400 409.333 400 428 cv
cp
f
400 519.2 mo
400 506.4 406.4 500 419.2 500 cv
406.4 500 400 493.6 400 480.8 cv
400 493.6 393.6 500 380.8 500 cv
393.6 500 400 506.4 400 519.2 cv
cp
400 532 mo
400 510.667 389.333 500 368 500 cv
389.333 500 400 489.333 400 468 cv
400 489.333 410.667 500 432 500 cv
410.667 500 400 510.667 400 532 cv
cp
f
400 621.6 mo
400 607.2 407.2 600 421.6 600 cv
407.2 600 400 592.8 400 578.4 cv
400 592.8 392.8 600 378.4 600 cv
392.8 600 400 607.2 400 621.6 cv
cp
400 636 mo
400 612 388 600 364 600 cv
388 600 400 588 400 564 cv
400 588 412 600 436 600 cv
412 600 400 612 400 636 cv
cp
f
400 724 mo
400 708 408 700 424 700 cv
408 700 400 692 400 676 cv
400 692 392 700 376 700 cv
392 700 400 708 400 724 cv
cp
400 740 mo
400 713.333 386.667 700 360 700 cv
386.667 700 400 686.667 400 660 cv
400 686.667 413.333 700 440 700 cv
413.333 700 400 713.333 400 740 cv
cp
f
400 826.4 mo
400 808.8 408.8 800 426.4 800 cv
408.8 800 400 791.2 400 773.6 cv
400 791.2 391.2 800 373.6 800 cv
391.2 800 400 808.8 400 826.4 cv
cp
400 844 mo
400 814.667 385.333 800 356 800 cv
385.333 800 400 785.333 400 756 cv
400 785.333 414.667 800 444 800 cv
414.667 800 400 814.667 400 844 cv
cp
f
400 928.8 mo
400 909.6 409.6 900 428.8 900 cv
409.6 900 400 890.4 400 871.2 cv
400 890.4 390.4 900 371.2 900 cv
390.4 900 400 909.6 400 928.8 cv
cp
400 948 mo
400 916 384 900 352 900 cv
384 900 400 884 400 852 cv
400 884 416 900 448 900 cv
416 900 400 916 400 948 cv
cp
f
400 1030 mo
400 1010 410 1000 430 1000 cv
410 1000 400 990 400 970 cv
400 990 390 1000 370 1000 cv
390 1000 400 1010 400 1030 cv
cp
400 1050 mo
400 1016.67 383.333 1000 350 1000 cv
383.333 1000 400 983.333 400 950 cv
400 983.333 416.667 1000 450 1000 cv
416.667 1000 400 1016.67 400 1050 cv
cp
f
500 7.2002 mo
500 2.3999 502.4 0 507.2 0 cv
502.4 0 500 -2.3999 500 -7.2002 cv
500 -2.3999 497.6 0 492.8 0 cv
497.6 0 500 2.3999 500 7.2002 cv
cp
500 12 mo
500 4 496 0 488 0 cv
496 0 500 -4 500 -12 cv
500 -4 504 0 512 0 cv
504 0 500 4 500 12 cv
cp
f
500 109.6 mo
500 103.2 503.2 100 509.6 100 cv
503.2 100 500 96.7998 500 90.3999 cv
500 96.7998 496.8 100 490.4 100 cv
496.8 100 500 103.2 500 109.6 cv
cp
500 116 mo
500 105.333 494.667 100 484 100 cv
494.667 100 500 94.6665 500 84 cv
500 94.6665 505.333 100 516 100 cv
505.333 100 500 105.333 500 116 cv
cp
f
500 212 mo
500 204 504 200 512 200 cv
504 200 500 196 500 188 cv
500 196 496 200 488 200 cv
496 200 500 204 500 212 cv
cp
500 220 mo
500 206.667 493.333 200 480 200 cv
493.333 200 500 193.333 500 180 cv
500 193.333 506.667 200 520 200 cv
506.667 200 500 206.667 500 220 cv
cp
f
500 314.4 mo
500 304.8 504.8 300 514.4 300 cv
504.8 300 500 295.2 500 285.6 cv
500 295.2 495.2 300 485.6 300 cv
495.2 300 500 304.8 500 314.4 cv
cp
500 324 mo
500 308 492 300 476 300 cv
492 300 500 292 500 276 cv
500 292 508 300 524 300 cv
508 300 500 308 500 324 cv
cp
f
500 416.8 mo
500 405.6 505.6 400 516.8 400 cv
505.6 400 500 394.4 500 383.2 cv
500 394.4 494.4 400 483.2 400 cv
494.4 400 500 405.6 500 416.8 cv
cp
500 428 mo
500 409.333 490.667 400 472 400 cv
490.667 400 500 390.667 500 372 cv
500 390.667 509.333 400 528 400 cv
509.333 400 500 409.333 500 428 cv
cp
f
500 519.2 mo
500 506.4 506.4 500 519.2 500 cv
506.4 500 500 493.6 500 480.8 cv
500 493.6 493.6 500 480.8 500 cv
493.6 500 500 506.4 500 519.2 cv
cp
500 532 mo
500 510.667 489.333 500 468 500 cv
489.333 500 500 489.333 500 468 cv
500 489.333 510.667 500 532 500 cv
510.667 500 500 510.667 500 532 cv
cp
f
500 621.6 mo
500 607.2 507.2 600 521.6 600 cv
507.2 600 500 592.8 500 578.4 cv
500 592.8 492.8 600 478.4 600 cv
492.8 600 500 607.2 500 621.6 cv
cp
500 636 mo
500 612 488 600 464 600 cv
488 600 500 588 500 564 cv
500 588 512 600 536 600 cv
512 600 500 612 500 636 cv
cp
f
500 724 mo
500 708 508 700 524 700 cv
508 700 500 692 500 676 cv
500 692 492 700 476 700 cv
492 700 500 708 500 724 cv
cp
500 740 mo
500 713.333 486.667 700 460 700 cv
486.667 700 500 686.667 500 660 cv
500 686.667 513.333 700 540 700 cv
513.333 700 500 713.333 500 740 cv
cp
f
500 826.4 mo
500 808.8 508.8 800 526.4 800 cv
508.8 800 500 791.2 500 773.6 cv
500 791.2 491.2 800 473.6 800 cv
491.2 800 500 808.8 500 826.4 cv
cp
500 844 mo
500 814.667 485.333 800 456 800 cv
485.333 800 500 785.333 500 756 cv
500 785.333 514.667 800 544 800 cv
514.667 800 500 814.667 500 844 cv
cp
f
500 928.8 mo
500 909.6 509.6 900 528.8 900 cv
509.6 900 500 890.4 500 871.2 cv
500 890.4 490.4 900 471.2 900 cv
490.4 900 500 909.6 500 928.8 cv
cp
500 948 mo
500 916 484 900 452 900 cv
484 900 500 884 500 852 cv
500 884 516 900 548 900 cv
516 900 500 916 500 948 cv
cp
f
500 1030 mo
500 1010 510 1000 530 1000 cv
510 1000 500 990 500 970 cv
500 990 490 1000 470 1000 cv
490 1000 500 1010 500 1030 cv
cp
500 1050 mo
500 1016.67 483.333 1000 450 1000 cv
483.333 1000 500 983.333 500 950 cv
500 983.333 516.667 1000 550 1000 cv
516.667 1000 500 1016.67 500 1050 cv
cp
f
600 7.2002 mo
600 2.3999 602.4 0 607.2 0 cv
602.4 0 600 -2.3999 600 -7.2002 cv
600 -2.3999 597.6 0 592.8 0 cv
597.6 0 600 2.3999 600 7.2002 cv
cp
600 12 mo
600 4 596 0 588 0 cv
596 0 600 -4 600 -12 cv
600 -4 604 0 612 0 cv
604 0 600 4 600 12 cv
cp
f
600 109.6 mo
600 103.2 603.2 100 609.6 100 cv
603.2 100 600 96.7998 600 90.3999 cv
600 96.7998 596.8 100 590.4 100 cv
596.8 100 600 103.2 600 109.6 cv
cp
600 116 mo
600 105.333 594.667 100 584 100 cv
594.667 100 600 94.6665 600 84 cv
600 94.6665 605.333 100 616 100 cv
605.333 100 600 105.333 600 116 cv
cp
f
600 212 mo
600 204 604 200 612 200 cv
604 200 600 196 600 188 cv
600 196 596 200 588 200 cv
596 200 600 204 600 212 cv
cp
600 220 mo
600 206.667 593.333 200 580 200 cv
593.333 200 600 193.333 600 180 cv
600 193.333 606.667 200 620 200 cv
606.667 200 600 206.667 600 220 cv
cp
f
600 314.4 mo
600 304.8 604.8 300 614.4 300 cv
604.8 300 600 295.2 600 285.6 cv
600 295.2 595.2 300 585.6 300 cv
595.2 300 600 304.8 600 314.4 cv
cp
600 324 mo
600 308 592 300 576 300 cv
592 300 600 292 600 276 cv
600 292 608 300 624 300 cv
608 300 600 308 600 324 cv
cp
f
600 416.8 mo
600 405.6 605.6 400 616.8 400 cv
605.6 400 600 394.4 600 383.2 cv
600 394.4 594.4 400 583.2 400 cv
594.4 400 600 405.6 600 416.8 cv
cp
600 428 mo
600 409.333 590.667 400 572 400 cv
590.667 400 600 390.667 600 372 cv
600 390.667 609.333 400 628 400 cv
609.333 400 600 409.333 600 428 cv
cp
f
600 519.2 mo
600 506.4 606.4 500 619.2 500 cv
606.4 500 600 493.6 600 480.8 cv
600 493.6 593.6 500 580.8 500 cv
593.6 500 600 506.4 600 519.2 cv
cp
600 532 mo
600 510.667 589.333 500 568 500 cv
589.333 500 600 489.333 600 468 cv
600 489.333 610.667 500 632 500 cv
610.667 500 600 510.667 600 532 cv
cp
f
600 621.6 mo
600 607.2 607.2 600 621.6 600 cv
607.2 600 600 592.8 600 578.4 cv
600 592.8 592.8 600 578.4 600 cv
592.8 600 600 607.2 600 621.6 cv
cp
600 636 mo
600 612 588 600 564 600 cv
588 600 600 588 600 564 cv
600 588 612 600 636 600 cv
612 600 600 612 600 636 cv
cp
f
600 724 mo
600 708 608 700 624 700 cv
608 700 600 692 600 676 cv
600 692 592 700 576 700 cv
592 700 600 708 600 724 cv
cp
600 740 mo
600 713.333 586.667 700 560 700 cv
586.667 700 600 686.667 600 660 cv
600 686.667 613.333 700 640 700 cv
613.333 700 600 713.333 600 740 cv
cp
f
600 826.4 mo
600 808.8 608.8 800 626.4 800 cv
608.8 800 600 791.2 600 773.6 cv
600 791.2 591.2 800 573.6 800 cv
591.2 800 600 808.8 600 826.4 cv
cp
600 844 mo
600 814.667 585.333 800 556 800 cv
585.333 800 600 785.333 600 756 cv
600 785.333 614.667 800 644 800 cv
614.667 800 600 814.667 600 844 cv
cp
f
600 928.8 mo
600 909.6 609.6 900 628.8 900 cv
609.6 900 600 890.4 600 871.2 cv
600 890.4 590.4 900 571.2 900 cv
590.4 900 600 909.6 600 928.8 cv
cp
600 948 mo
600 916 584 900 552 900 cv
584 900 600 884 600 852 cv
600 884 616 900 648 900 cv
616 900 600 916 600 948 cv
cp
f
600 1030 mo
600 1010 610 1000 630 1000 cv
610 1000 600 990 600 970 cv
600 990 590 1000 570 1000 cv
590 1000 600 1010 600 1030 cv
cp
600 1050 mo
600 1016.67 583.333 1000 550 1000 cv
583.333 1000 600 983.333 600 950 cv
600 983.333 616.667 1000 650 1000 cv
616.667 1000 600 1016.67 600 1050 cv
cp
f
700 7.2002 mo
700 2.3999 702.4 0 707.2 0 cv
702.4 0 700 -2.3999 700 -7.2002 cv
700 -2.3999 697.6 0 692.8 0 cv
697.6 0 700 2.3999 700 7.2002 cv
cp
700 12 mo
700 4 696 0 688 0 cv
696 0 700 -4 700 -12 cv
700 -4 704 0 712 0 cv
704 0 700 4 700 12 cv
cp
f
700 109.6 mo
700 103.2 703.2 100 709.6 100 cv
703.2 100 700 96.7998 700 90.3999 cv
700 96.7998 696.8 100 690.4 100 cv
696.8 100 700 103.2 700 109.6 cv
cp
700 116 mo
700 105.333 694.667 100 684 100 cv
694.667 100 700 94.6665 700 84 cv
700 94.6665 705.333 100 716 100 cv
705.333 100 700 105.333 700 116 cv
cp
f
700 212 mo
700 204 704 200 712 200 cv
704 200 700 196 700 188 cv
700 196 696 200 688 200 cv
696 200 700 204 700 212 cv
cp
700 220 mo
700 206.667 693.333 200 680 200 cv
693.333 200 700 193.333 700 180 cv
700 193.333 706.667 200 720 200 cv
706.667 200 700 206.667 700 220 cv
cp
f
700 314.4 mo
700 304.8 704.8 300 714.4 300 cv
704.8 300 700 295.2 700 285.6 cv
700 295.2 695.2 300 685.6 300 cv
695.2 300 700 304.8 700 314.4 cv
cp
700 324 mo
700 308 692 300 676 300 cv
692 300 700 292 700 276 cv
700 292 708 300 724 300 cv
708 300 700 308 700 324 cv
cp
f
700 416.8 mo
700 405.6 705.6 400 716.8 400 cv
705.6 400 700 394.4 700 383.2 cv
700 394.4 694.4 400 683.2 400 cv
694.4 400 700 405.6 700 416.8 cv
cp
700 428 mo
700 409.333 690.667 400 672 400 cv
690.667 400 700 390.667 700 372 cv
700 390.667 709.333 400 728 400 cv
709.333 400 700 409.333 700 428 cv
cp
f
700 519.2 mo
700 506.4 706.4 500 719.2 500 cv
706.4 500 700 493.6 700 480.8 cv
700 493.6 693.6 500 680.8 500 cv
693.6 500 700 506.4 700 519.2 cv
cp
700 532 mo
700 510.667 689.333 500 668 500 cv
689.333 500 700 489.333 700 468 cv
700 489.333 710.667 500 732 500 cv
710.667 500 700 510.667 700 532 cv
cp
f
700 621.6 mo
700 607.2 707.2 600 721.6 600 cv
707.2 600 700 592.8 700 578.4 cv
700 592.8 692.8 600 678.4 600 cv
692.8 600 700 607.2 700 621.6 cv
cp
700 636 mo
700 612 688 600 664 600 cv
688 600 700 588 700 564 cv
700 588 712 600 736 600 cv
712 600 700 612 700 636 cv
cp
f
700 724 mo
700 708 708 700 724 700 cv
708 700 700 692 700 676 cv
700 692 692 700 676 700 cv
692 700 700 708 700 724 cv
cp
700 740 mo
700 713.333 686.667 700 660 700 cv
686.667 700 700 686.667 700 660 cv
700 686.667 713.333 700 740 700 cv
713.333 700 700 713.333 700 740 cv
cp
f
700 826.4 mo
700 808.8 708.8 800 726.4 800 cv
708.8 800 700 791.2 700 773.6 cv
700 791.2 691.2 800 673.6 800 cv
691.2 800 700 808.8 700 826.4 cv
cp
700 844 mo
700 814.667 685.333 800 656 800 cv
685.333 800 700 785.333 700 756 cv
700 785.333 714.667 800 744 800 cv
714.667 800 700 814.667 700 844 cv
cp
f
700 928.8 mo
700 909.6 709.6 900 728.8 900 cv
709.6 900 700 890.4 700 871.2 cv
700 890.4 690.4 900 671.2 900 cv
690.4 900 700 909.6 700 928.8 cv
cp
700 948 mo
700 916 684 900 652 900 cv
684 900 700 884 700 852 cv
700 884 716 900 748 900 cv
716 900 700 916 700 948 cv
cp
f
700 1030 mo
700 1010 710 1000 730 1000 cv
710 1000 700 990 700 970 cv
700 990 690 1000 670 1000 cv
690 1000 700 1010 700 1030 cv
cp
700 1050 mo
700 1016.67 683.333 1000 650 1000 cv
683.333 1000 700 983.333 700 950 cv
700 983.333 716.667 1000 750 1000 cv
716.667 1000 700 1016.67 700 1050 cv
cp
f
800 7.2002 mo
800 2.3999 802.4 0 807.2 0 cv
802.4 0 800 -2.3999 800 -7.2002 cv
800 -2.3999 797.6 0 792.8 0 cv
797.6 0 800 2.3999 800 7.2002 cv
cp
800 12 mo
800 4 796 0 788 0 cv
796 0 800 -4 800 -12 cv
800 -4 804 0 812 0 cv
804 0 800 4 800 12 cv
cp
f
800 109.6 mo
800 103.2 803.2 100 809.6 100 cv
803.2 100 800 96.7998 800 90.3999 cv
800 96.7998 796.8 100 790.4 100 cv
796.8 100 800 103.2 800 109.6 cv
cp
800 116 mo
800 105.333 794.667 100 784 100 cv
794.667 100 800 94.6665 800 84 cv
800 94.6665 805.333 100 816 100 cv
805.333 100 800 105.333 800 116 cv
cp
f
800 212 mo
800 204 804 200 812 200 cv
804 200 800 196 800 188 cv
800 196 796 200 788 200 cv
796 200 800 204 800 212 cv
cp
800 220 mo
800 206.667 793.333 200 780 200 cv
793.333 200 800 193.333 800 180 cv
800 193.333 806.667 200 820 200 cv
806.667 200 800 206.667 800 220 cv
cp
f
800 314.4 mo
800 304.8 804.8 300 814.4 300 cv
804.8 300 800 295.2 800 285.6 cv
800 295.2 795.2 300 785.6 300 cv
795.2 300 800 304.8 800 314.4 cv
cp
800 324 mo
800 308 792 300 776 300 cv
792 300 800 292 800 276 cv
800 292 808 300 824 300 cv
808 300 800 308 800 324 cv
cp
f
800 416.8 mo
800 405.6 805.6 400 816.8 400 cv
805.6 400 800 394.4 800 383.2 cv
800 394.4 794.4 400 783.2 400 cv
794.4 400 800 405.6 800 416.8 cv
cp
800 428 mo
800 409.333 790.667 400 772 400 cv
790.667 400 800 390.667 800 372 cv
800 390.667 809.333 400 828 400 cv
809.333 400 800 409.333 800 428 cv
cp
f
800 519.2 mo
800 506.4 806.4 500 819.2 500 cv
806.4 500 800 493.6 800 480.8 cv
800 493.6 793.6 500 780.8 500 cv
793.6 500 800 506.4 800 519.2 cv
cp
800 532 mo
800 510.667 789.333 500 768 500 cv
789.333 500 800 489.333 800 468 cv
800 489.333 810.667 500 832 500 cv
810.667 500 800 510.667 800 532 cv
cp
f
800 621.6 mo
800 607.2 807.2 600 821.6 600 cv
807.2 600 800 592.8 800 578.4 cv
800 592.8 792.8 600 778.4 600 cv
792.8 600 800 607.2 800 621.6 cv
cp
800 636 mo
800 612 788 600 764 600 cv
788 600 800 588 800 564 cv
800 588 812 600 836 600 cv
812 600 800 612 800 636 cv
cp
f
800 724 mo
800 708 808 700 824 700 cv
808 700 800 692 800 676 cv
800 692 792 700 776 700 cv
792 700 800 708 800 724 cv
cp
800 740 mo
800 713.333 786.667 700 760 700 cv
786.667 700 800 686.667 800 660 cv
800 686.667 813.333 700 840 700 cv
813.333 700 800 713.333 800 740 cv
cp
f
800 826.4 mo
800 808.8 808.8 800 826.4 800 cv
808.8 800 800 791.2 800 773.6 cv
800 791.2 791.2 800 773.6 800 cv
791.2 800 800 808.8 800 826.4 cv
cp
800 844 mo
800 814.667 785.333 800 756 800 cv
785.333 800 800 785.333 800 756 cv
800 785.333 814.667 800 844 800 cv
814.667 800 800 814.667 800 844 cv
cp
f
800 928.8 mo
800 909.6 809.6 900 828.8 900 cv
809.6 900 800 890.4 800 871.2 cv
800 890.4 790.4 900 771.2 900 cv
790.4 900 800 909.6 800 928.8 cv
cp
800 948 mo
800 916 784 900 752 900 cv
784 900 800 884 800 852 cv
800 884 816 900 848 900 cv
816 900 800 916 800 948 cv
cp
f
800 1030 mo
800 1010 810 1000 830 1000 cv
810 1000 800 990 800 970 cv
800 990 790 1000 770 1000 cv
790 1000 800 1010 800 1030 cv
cp
800 1050 mo
800 1016.67 783.333 1000 750 1000 cv
783.333 1000 800 983.333 800 950 cv
800 983.333 816.667 1000 850 1000 cv
816.667 1000 800 1016.67 800 1050 cv
cp
f
900 7.2002 mo
900 2.3999 902.4 0 907.2 0 cv
902.4 0 900 -2.3999 900 -7.2002 cv
900 -2.3999 897.6 0 892.8 0 cv
897.6 0 900 2.3999 900 7.2002 cv
cp
900 12 mo
900 4 896 0 888 0 cv
896 0 900 -4 900 -12 cv
900 -4 904 0 912 0 cv
904 0 900 4 900 12 cv
cp
f
900 109.6 mo
900 103.2 903.2 100 909.6 100 cv
903.2 100 900 96.7998 900 90.3999 cv
900 96.7998 896.8 100 890.4 100 cv
896.8 100 900 103.2 900 109.6 cv
cp
900 116 mo
900 105.333 894.667 100 884 100 cv
894.667 100 900 94.6665 900 84 cv
900 94.6665 905.333 100 916 100 cv
905.333 100 900 105.333 900 116 cv
cp
f
900 212 mo
900 204 904 200 912 200 cv
904 200 900 196 900 188 cv
900 196 896 200 888 200 cv
896 200 900 204 900 212 cv
cp
900 220 mo
900 206.667 893.333 200 880 200 cv
893.333 200 900 193.333 900 180 cv
900 193.333 906.667 200 920 200 cv
906.667 200 900 206.667 900 220 cv
cp
f
900 314.4 mo
900 304.8 904.8 300 914.4 300 cv
904.8 300 900 295.2 900 285.6 cv
900 295.2 895.2 300 885.6 300 cv
895.2 300 900 304.8 900 314.4 cv
cp
900 324 mo
900 308 892 300 876 300 cv
892 300 900 292 900 276 cv
900 292 908 300 924 300 cv
908 300 900 308 900 324 cv
cp
f
900 416.8 mo
900 405.6 905.6 400 916.8 400 cv
905.6 400 900 394.4 900 383.2 cv
900 394.4 894.4 400 883.2 400 cv
894.4 400 900 405.6 900 416.8 cv
cp
900 428 mo
900 409.333 890.667 400 872 400 cv
890.667 400 900 390.667 900 372 cv
900 390.667 909.333 400 928 400 cv
909.333 400 900 409.333 900 428 cv
cp
f
900 519.2 mo
900 506.4 906.4 500 919.2 500 cv
906.4 500 900 493.6 900 480.8 cv
900 493.6 893.6 500 880.8 500 cv
893.6 500 900 506.4 900 519.2 cv
cp
900 532 mo
900 510.667 889.333 500 868 500 cv
889.333 500 900 489.333 900 468 cv
900 489.333 910.667 500 932 500 cv
910.667 500 900 510.667 900 532 cv
cp
f
900 621.6 mo
900 607.2 907.2 600 921.6 600 cv
907.2 600 900 592.8 900 578.4 cv
900 592.8 892.8 600 878.4 600 cv
892.8 600 900 607.2 900 621.6 cv
cp
900 636 mo
900 612 888 600 864 600 cv
888 600 900 588 900 564 cv
900 588 912 600 936 600 cv
912 600 900 612 900 636 cv
cp
f
900 724 mo
900 708 908 700 924 700 cv
908 700 900 692 900 676 cv
900 692 892 700 876 700 cv
892 700 900 708 900 724 cv
cp
900 740 mo
900 713.333 886.667 700 860 700 cv
886.667 700 900 686.667 900 660 cv
900 686.667 913.333 700 940 700 cv
913.333 700 900 713.333 900 740 cv
cp
f
900 826.4 mo
900 808.8 908.8 800 926.4 800 cv
908.8 800 900 791.2 900 773.6 cv
900 791.2 891.2 800 873.6 800 cv
891.2 800 900 808.8 900 826.4 cv
cp
900 844 mo
900 814.667 885.333 800 856 800 cv
885.333 800 900 785.333 900 756 cv
900 785.333 914.667 800 944 800 cv
914.667 800 900 814.667 900 844 cv
cp
f
900 928.8 mo
900 909.6 909.6 900 928.8 900 cv
909.6 900 900 890.4 900 871.2 cv
900 890.4 890.4 900 871.2 900 cv
890.4 900 900 909.6 900 928.8 cv
cp
900 948 mo
900 916 884 900 852 900 cv
884 900 900 884 900 852 cv
900 884 916 900 948 900 cv
916 900 900 916 900 948 cv
cp
f
900 1030 mo
900 1010 910 1000 930 1000 cv
910 1000 900 990 900 970 cv
900 990 890 1000 870 1000 cv
890 1000 900 1010 900 1030 cv
cp
900 1050 mo
900 1016.67 883.333 1000 850 1000 cv
883.333 1000 900 983.333 900 950 cv
900 983.333 916.667 1000 950 1000 cv
916.667 1000 900 1016.67 900 1050 cv
cp
f
1000 7.2002 mo
1000 2.3999 1002.4 0 1007.2 0 cv
1002.4 0 1000 -2.3999 1000 -7.2002 cv
1000 -2.3999 997.6 0 992.8 0 cv
997.6 0 1000 2.3999 1000 7.2002 cv
cp
1000 12 mo
1000 4 996 0 988 0 cv
996 0 1000 -4 1000 -12 cv
1000 -4 1004 0 1012 0 cv
1004 0 1000 4 1000 12 cv
cp
f
1000 109.6 mo
1000 103.2 1003.2 100 1009.6 100 cv
1003.2 100 1000 96.7998 1000 90.3999 cv
1000 96.7998 996.8 100 990.4 100 cv
996.8 100 1000 103.2 1000 109.6 cv
cp
1000 116 mo
1000 105.333 994.667 100 984 100 cv
994.667 100 1000 94.6665 1000 84 cv
1000 94.6665 1005.33 100 1016 100 cv
1005.33 100 1000 105.333 1000 116 cv
cp
f
1000 212 mo
1000 204 1004 200 1012 200 cv
1004 200 1000 196 1000 188 cv
1000 196 996 200 988 200 cv
996 200 1000 204 1000 212 cv
cp
1000 220 mo
1000 206.667 993.333 200 980 200 cv
993.333 200 1000 193.333 1000 180 cv
1000 193.333 1006.67 200 1020 200 cv
1006.67 200 1000 206.667 1000 220 cv
cp
f
1000 314.4 mo
1000 304.8 1004.8 300 1014.4 300 cv
1004.8 300 1000 295.2 1000 285.6 cv
1000 295.2 995.2 300 985.6 300 cv
995.2 300 1000 304.8 1000 314.4 cv
cp
1000 324 mo
1000 308 992 300 976 300 cv
992 300 1000 292 1000 276 cv
1000 292 1008 300 1024 300 cv
1008 300 1000 308 1000 324 cv
cp
f
1000 416.8 mo
1000 405.6 1005.6 400 1016.8 400 cv
1005.6 400 1000 394.4 1000 383.2 cv
1000 394.4 994.4 400 983.2 400 cv
994.4 400 1000 405.6 1000 416.8 cv
cp
1000 428 mo
1000 409.333 990.667 400 972 400 cv
990.667 400 1000 390.667 1000 372 cv
1000 390.667 1009.33 400 1028 400 cv
1009.33 400 1000 409.333 1000 428 cv
cp
f
1000 519.2 mo
1000 506.4 1006.4 500 1019.2 500 cv
1006.4 500 1000 493.6 1000 480.8 cv
1000 493.6 993.6 500 980.8 500 cv
993.6 500 1000 506.4 1000 519.2 cv
cp
1000 532 mo
1000 510.667 989.333 500 968 500 cv
989.333 500 1000 489.333 1000 468 cv
1000 489.333 1010.67 500 1032 500 cv
1010.67 500 1000 510.667 1000 532 cv
cp
f
1000 621.6 mo
1000 607.2 1007.2 600 1021.6 600 cv
1007.2 600 1000 592.8 1000 578.4 cv
1000 592.8 992.8 600 978.4 600 cv
992.8 600 1000 607.2 1000 621.6 cv
cp
1000 636 mo
1000 612 988 600 964 600 cv
988 600 1000 588 1000 564 cv
1000 588 1012 600 1036 600 cv
1012 600 1000 612 1000 636 cv
cp
f
1000 724 mo
1000 708 1008 700 1024 700 cv
1008 700 1000 692 1000 676 cv
1000 692 992 700 976 700 cv
992 700 1000 708 1000 724 cv
cp
1000 740 mo
1000 713.333 986.667 700 960 700 cv
986.667 700 1000 686.667 1000 660 cv
1000 686.667 1013.33 700 1040 700 cv
1013.33 700 1000 713.333 1000 740 cv
cp
f
1000 826.4 mo
1000 808.8 1008.8 800 1026.4 800 cv
1008.8 800 1000 791.2 1000 773.6 cv
1000 791.2 991.2 800 973.6 800 cv
991.2 800 1000 808.8 1000 826.4 cv
cp
1000 844 mo
1000 814.667 985.333 800 956 800 cv
985.333 800 1000 785.333 1000 756 cv
1000 785.333 1014.67 800 1044 800 cv
1014.67 800 1000 814.667 1000 844 cv
cp
f
1000 928.8 mo
1000 909.6 1009.6 900 1028.8 900 cv
1009.6 900 1000 890.4 1000 871.2 cv
1000 890.4 990.4 900 971.2 900 cv
990.4 900 1000 909.6 1000 928.8 cv
cp
1000 948 mo
1000 916 984 900 952 900 cv
984 900 1000 884 1000 852 cv
1000 884 1016 900 1048 900 cv
1016 900 1000 916 1000 948 cv
cp
f
1000 1030 mo
1000 1010 1010 1000 1030 1000 cv
1010 1000 1000 990 1000 970 cv
1000 990 990 1000 970 1000 cv
990 1000 1000 1010 1000 1030 cv
cp
1000 1050 mo
1000 1016.67 983.333 1000 950 1000 cv
983.333 1000 1000 983.333 1000 950 cv
1000 983.333 1016.67 1000 1050 1000 cv
1016.67 1000 1000 1016.67 1000 1050 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Zydd) ()
%%Title: (bw_shape_137.eps)
%%CreationDate: 8/17/2016 8:33 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",kBmV$cZCpCPGoltjn8;`'mKq_dN;%`LgZ8k`b,1*u"$V.Yr@l!7,\8G]6FjCDR:57Om:nuk;Fmc5,e]>/R+S?eeOl+\lULiF
%KuCWoe&ah;QH2Zf,+CAYrgK5,WLT5XU7.B[MCSFoXJF<pF%0?2lM:;"f13C&5&&STb,s6,]io?_()!,:(2JcEi[^-*'0##f[Jlf:
%7^`$^:4BO`X$7@LeT.A?r$\ueZBCO+\$GS7nPuQSNkR]KbKY`oO]C'.l6AspZ:0p$.FZ&bpZCN(#PmYtghmd(8Z">4M6lRYBFFX%
%rFbui=o#JRC,_(<9"fC4_c(I()^!&]HRlar<;!!`dARi8AQC0.'<>(@s5p>WFB6p`6pgoha>3SCbUJR4>B/c>/*6d^,^.>L;RpMn
%c[)pG?MP[@>ZoN$anjU)SUFM]c-':e9l.6f-tcQ,@D,XCP$b^j'WOT&0C1p/qld,A;/Et4gZ3A+X'`57(.bF8N')cGikK($/7go,
%j$pS&;86S[cKe@\Oj3/:4kWYk7*[J!MIGU3s-AM/B.LUog54:CBKA6\f'lGUZTN,+?7WDeDPHs:h5ljr#AblHXS!)S7QLqVS)aOV
%XX.Os\'$XH5&"8kLS1V;l,.S2lW1-p=oY-*U.%:aO@E+mmAF-;[AE9r-6l*02=+eV0-62>j9Lqg9mGa&,>4>N4K3cAiHDR,e_%#&
%WfR'8]j@^'QP7<=AiX9kB+i\[,Pg5(oRG?/8n04-p\FA5dV[bBXDbR_J![5/#"[DBVH>>pIMA923/O8,Mm["M_$!Ne#F3&\Ue",A
%VXAmL.p;G))s*DEq[q9hZ3X;-U,Z:]&_22koUJh=q"ZlE5a#NM7,jqDHm+Q,I]c_dfK`8OVT]"(,HWW-hoOGMY*E1N_:D,M5--Et
%=F'o7a)eptBmhrI_JbsZA(</JjiuM!bqcX$eTskneE^,DDCl#rjL1Oig\T11AE#$7AO(p$S+pU#>-5FqMiG3gMdQ<EE[RW4ho9D"
%0<Eb'El9.L1[ct$.3IE&[Rq:_2$6=*:n@4X'\b9ZAAie3(7US06slaNpK+1\-JcW9=/B2GT3(ud5olW:q-1*i^S[G'T]r>S5E[Gs
%:''tXOcr/XP0k_mrGT);k+0_FXo=q2qik2*QMi)(I.=8k^7Ru-Nf"q?`#R/bY7U`/lmPG^A,;6Jai]J+,5pY_r0'$]8Ki.cg+[S;
%<b6bOMPAJn;3DC5rn6s*rIN0WrC]BBOhZ@/n,>]:nAJbpkIm*.N=[7)QK:sfVHC1@ilGJ`%'c&r_2:[]!Yd,qG#!op1*N!d@[oR$
%[p*t:=:JO8&$7k>b<'tms4qXrEUrJ_+WZY4d=^s)fi%(?9urJD[)RQ`eGnOcPJkCXK6"2Uk,r:0fHr1Zi\A?cT^@J_XLupF.5q46
%^UQHi3$QXXJ9We'rQe!A7MOuVmqYsq^Y36S(!\Pqok(Q*8!E19/jSmeN@[,ZjdN<J,Vm!-WZ3blVu87h#FKa^ZIX@"]@^pOP0S>J
%Ei?Z\h7nlu01VE;=ojL<d^*dRgR8oWpj[]le`sP_S6DrD?f&u&=Ok>ik6@Z2cP<l^QK&[BZl-/o3+A_@;,F4JcUQ</V9%V\'!Ec7
%`TLtr<mQTnUqaSdF?V*(r#L8hTXod'i+Y2YaQfc(0`],KJ$k+c[#3AjU2qaIL[eU6TBJ5PTL#ns0Il:]gb+o6'C19*\Xncu/(nfA
%X:>6;Xe/hpOV7UWCEJ`<$.:lLg1L5K)te]`DtpN3Zt0,gruq;jDS*_,89Q_%6L2m:ELgsSpe<9u?t1*8[\mj<:Ze``XIdpu43D;N
%RdF!VgNc+\q+@\b/cL*!CqatcM$s8e0/cH03g!b".PIT@\C"[gPc\33H>NQ(rlWrl[J+KC)pZUVMu&j,]k,M]]iCcg1U1Ehg>;C3
%[2].tZ>7_i=kY4"G?_][p@@._YFTYR<i<T^`Ca,>?H,I><,ud"b35VQH5AAU2<o$UY?7prn^?JCHDsb5gYZ`=="j5]dqsX$]8?3a
%G!0hGClp#ejaYE^Wamt2-[7.9][qre<rZn^?EM1jQu8a#V`X'uB=^IM2W7'k>bXNMg<E$do'o^kM`5'<TINCe9O?q+[kM;h"g[Qs
%[2MK^M-p6.G#_-[4f9:2U++d2e.N+nmOPa6CU<Ad'TpO4a'giI?.FR-AS=H,0!ld"fsO+(<3iglWdJNj=fhR-Cn82g-)3tUdO_lM
%c+hGYMt0)L[eisMY#Hq=Itc1mPb$n_gFQ,?'PjmZF:7f<hJcZ@oZtEqWUf_EE/u+/]q+%63I>8.1_s\&3rqhW?/kg<f"tk+p#`Vo
%euCuYp.nWorT*aSh&q\<i^_J'OX:/](gGnLG7.d.._#)Ngh[RF,'A?#`a\rkfcJ%Tb*CSfG&6gnPu@M(VqXe"?VUcemTH[Ab)&$%
%BJELkm:Q=Qn[>+!!ORcmFsTFDR:8hQKj_Na*o/qb\21#A4r[@7LMkesCT%He5jcg:[0dkQ*i?GMs/LXUq^WG^om66)f<85CWs7=)
%;#]!/DA6I5[SQd,5k1iERFCd"Cb@5nBPt>N?SN6t$W5`7j%i(ROKkfp)J27O9\hQb;AIibkufg`?D`VhcA'p<ej"$'%1:KGUTF\K
%9*#gTdo'g\P<HX;W.+_DXR^sSA`hi[29jIjnbf[uFPI"*1Vj6f^)6+c`$&k3CG0R*L/h!BpekG%]iLo9=nRU9_/4n*HQ0C7:o-kA
%D(@n0cdY3A$#<I5(Uau[!n.JrXI<sIT)Y9#p*H;g<D\*a^]<!E1KaVEEjJ(+9j84EGc=^^AH&C*^jjH'q+;^0j&MN64Pt#r;6>F6
%\#Wu?dX!-6)n$4QpLZ$Yj.aZB'AE"G^#>/IbU2VNZ;GP(ANWX7kTR5Ab^OV5BiV6[T=4B4`:'4t3r9ds3pbEijaRW&ArE-lk&aX)
%<Alle/"HuUN>,jYkN/%VXjg?>ZfW6(dojTTT`)*ZqTsatMhDi[g3Z2Zi4R@kVm(Qle><2WbhA2/3Ae-ra6K,TH*3(ta"R*tWEf!s
%@3m[!oer*t*Y*1lW,HIBqMHL"&^n)7I^po1Ar3<[YI/qR"&libH<*MrgQU5r52UCpaI>Kp+tpH/jNFYDEKo:ePibTjBbY[%^lL[N
%b9b?@jTDe=,jt:tV<)!/fgS$%^\BD)%S1>^BtMRU%.N\9>H]<nH8Ed1a0$dqS5Pu#SbejoWSu4K;V\'Xp80ubT:n!oUO-gh]]Xhu
%02fE$SS6JXC0<SuQ"DTD,dALf84`JWS:@7`929;oS9Ie6<'.+kX>FG<Q_b[-@9>1U`[msR<G&-G12#b_[CSH!-Rpu3B@@;/B,`@1
%$ukMnj6ej=Ib14@%C0eeP3&`XQq*3L?*%'Oe6;=+`\T(-]?nSe]k3ZHVcBT@2Bu2CqAp%`e(uCXp]J5dcq1M;DnlRj]dl?`I'<NC
%M2DG<jd7oc#_rtDC$Ebk-+j]NZ*r2cVFssQb\3p2,&2f1cMdjsNfEY*7d5QrQF6L22+mD&\'A+2TD1SK7\a\`Kc!(?C]h1K:PL$>
%%3R/"#OEn,\NmP]\5&BBZmld%936rX(/M8BDa[fCWA['A+a.&3ccl:G<DV<h)4F0SkC40@-?1H&iQm*&;a\I(2ldb"l@QF<CX,PR
%%eh/6Oq[LNO.WDVD:+/ZUf;53?>FM3=2G/qB?E_5V9(R[^FE72VstjA>0iK-LZ:)-(s;?#nWplB9[c0DTgB`HdL=iO+$H\j<7RCJ
%Sghh-)kc2khCPMhbmNRi6(J3orZ]h\>J9hsI$GbGf!(2Y65p-Ppba)K(i:RJXt34sC+["7ihR?hpif+t>;)!$bJ,2&QDO4OCP=Z^
%U=:O5&U9NO:eL<"Wl7GdlED#@$IF%rGYaZAoZ/h1@&@Zjl@m8ob=pe3a['Qro-;Zkg6K,$^XA#-3uCk$1(-p^9Gj`+N@+mg0&]I0
%hMBUR%TJ-A#>oeAJF,ef991p$Mp5;T,B\o1`lR@H#\gbV\Y>>I>\!u;ZPX@lOr2n\:5i5.QMC-S?aY'g</h_,/Ytr.=1oA1*)aK$
%f<`q!<PPH^,/sMm*9ItLQ0/Ks'>kl;.pX[?(;[P'J/7hTai^Osd>"SDR?qY#WE!Mu?I:osn8A`;FR+njmZbV(Me\O3FDJ-NluVL1
%2a'IOoU?<hBr(:-V^hN(9@TD)naMDVP52)kH;jt\m3r\g/,;>4=4''.MGPTt@!JjHd&Dg;ZiQWg`_4s?__bP*O.U-N^;:]M+bMTH
%I=uZ.(1=6];[HD"oi6>FCGV9>]fY/ZRu$lmrMWi!3V7k%.[[2(Xtj<ITVjYqR6FCoI[$H<Rru"p/LBh^c[Qq,gs%,D<[-+A+2etK
%*i#>@8sJOkc.tMkY__cC^O5qu[bq@Yp%DVNK%k<DrH_)c9S!s'0ue:1mlPcgjM+m[I/RW/Ie7!FYOc,<Prd^6dG:SkPKH,Ol:JP^
%X6aMoZZU%6CV*_#;&>Q&R9>=4TuZKMY7BdQ&<45o^LB<Vk>sVrCCdB(bcIGUa:7RSZ3V#Qg!FIJ4o8+M:?X^+pT-nP0`fUGi*6.E
%4-^FL-U=ltXF%b.ep6fSnf_/G<uTW[]!)>OV7'^4SsS]uM)2dqqWu+Ma:0;+JC^>-9gJ$'$V13=:]^KOmdI6LDsm%*omE2$CR0!U
%7=R'kX&mUb.?cf_:T_@=<Vi&V/Y+MmNo8F_M[:0LeVj,jr`="7I:qn_\X<CCh5iS6-+/,4]Hq4?S`Sp[B'P=cP>&*k0-t7kDKEq1
%[gJ6\rCSG9?OQ&=\\m`\EaCe+Us/DS1s96%DU+be/Z!S\XNS@oX2e!dl:+h!)Rm`,mF(o2Tl0j+V33?oFrnhr,b&CeAbgV"Y&UhX
%[\%?;A9X>gU^Qj"m:r\IG:Vcn$TAlUjn7^OH$8#Fg"E=aSJ@/cRT7(6;bPDA4mXNYZh)j\l6UjRbE\p]D'e?d96tWUnm5&9Zo9JA
%E&4_;g>&*\dE^(.XKA5OV0SN.P&.(3_gWfQ2k!aS)thdEop>X#K,1^::NEso2anHrBCi;$;bO.rfrroJG&l$5f6!mTh'Uf'?T1d,
%jI>P:<1:JA_fQ]!f?O2\r#mp4)+^csr&Ai"N@G=BjC^6Kc!uk$rM>X#F!]KF)=+3cHS[)%Vrmqjq_B;Gc"H(<33W,=8t/'rqa1iC
%mZ*U&=F^(kF_Ps'2)S]YpuU6-H:j5o5EDGmZ!?[/"#?/Ldcs^qY/]+=G4AYZ5?I77:+BLbSGM>>Z>#:6)@I5!Q,>Dmi_%s8on1%b
%VtLV-_k7p^Cu2iRHSeeB+m#ied3%Y,hOYq+eEWVq].gs.kB\m@,s58r_VD<">Y-;ihK![Kh/fiDhn6^MAo3%;S*RqdIT_!Apu_E,
%IrQ0iX-rd+5/hOgfa&IZ7n`\nCE_7!ch55(d&u79k597:9s*3lI^tVX8B1M\bg]+-gTS-ZdG@EJS93h]lY,8-*'a<sNr=!`$MX8u
%Q7EoJ`SqeG'CW?Hc(J="de;JFQ%,skdeZpgg:S#<j^VK#4Z9ca(\_Nj>3J)L8)!O)Q0[#WHNE5S]-JDao.nR5es#Dp\^%c;abF>B
%2T4Srr4FTcjD'XAn"mlg:p,*.E:uICj@Zb`1>_t7=Spo:3qLVhHuVafb]U[JY"A`*rg]>#+(n&W2SR/dh^KZG]UbJac1PhOp)9=a
%q:hl3'YCo]D![+iV5sR7P(0V>lGR7BD/%Zff>cZ\@'3RlgS8W/([s$EZ1MOK5OY61iQBa3_s.-5Dm&iTn%1oh<]5-@^MiaB+X#CK
%XE<@"cMQdNoXjX5SBIqH\N]H,dh+XF\BTm%<&,TJRnIIro!.AIC\DFj1q@co^I<0Kpggq`C!@Zl^)kNh44e+f7d)rj[g0lTQE)dK
%1;/=`H6>Aq0!*N,k<(QHj6od,c(r#HGX4)kDMmI`X$4(1kLs6:$"Zhoaa_=QFlPsJ`Im/TZZWgAUq*@*Y-^$)K\E![`SG><\Y^-d
%7L^m"<I''8jf6)?270,+QE*'\Ydog9*G6$On[V+FQGhc@f?8<nN;&LpBWV5?fW]F&3)'c<4BaC&?!-](\bKio/r./^3VcKYE"rN?
%c)LV\'dS4&51u9pPYVEm+O3aer1#m)ajfI+/cAs5"f[WL+1^L8pT,dF]o?@imcgWWT'S)b"\Q,Dm+G=AoW@mBj\!Ka1WJ"2akN/t
%T-'kDX%KVgq=rR9T@BktA*eI4j`r63kLlEJSYaMq-2f^oR1g4J9N;jXgJW<=6'OS%S_'B(o23$?Vmuck,Q0@eS4NoXn+$k0Y1-Zi
%:D49$Gi6nt[ndo(J^X9CA`M99at)l>]s.&=oQ*pgdmZDr\u03lf7DA:g@P,+8>T$--[5#k"/T5fLX5'Il(51A.Yh!WH;YWQ=U=f5
%^*@JHcgjse9J6b$eAZ-;eWt*MQTX)FkMg3&G25rFFl(gA<UM@68QTi^NhM[ghSA,jF+/:rGrASc2r4-G>eCdmooR.^dN5=0j3?Z_
%?LEP!O+1N`J(!u$6?4].[RpMp6&*).3-3X;"f!s-fGPIN2Y\EK**&l%:Zh&d6(WT?`laZ@48[li[2:*G2peT\LY:Aq=_V2lYn<G+
%LIe#OQCJB(16pta))BKsDUJ.(4;te>Y,N`/oe[dm@r1M;;>l?!!B4LL"5a=F8uAEAEaZ%JiRcJf?`q'!cmeV+YIHF@'$O?;*s]>g
%O#G9LY,07^0fR_8fN\.[q?!ZnaXa"D+$Y%RgJsL(bY;KJUkY3N^Ke=McB]5@EE/]ql-eQ7+P3+[i3J@Y=rR)<E,jRZ+u!*0[!;2g
%FX`aPbLKduZ&B3j!\9]7.=o$--fkCmf5co7ci2ouJ2gu,\##.)<D2f>l_>5pB8h7&CgA-X_'VEIJ$W@O4`kM%;W"US^]p+ZK:f#*
%nCA/=%16H:2U7DA3FCek[/8$?ASbf#rF_r]?+R8L"PED`WRmETbYeQ02UMY.E]`<rR1Us[m@SYZJebb.euH&)"=C3d:"]Ki*S0Tt
%QugMnE6TP[>AdOmBP3;6J/aocEdkn$k=f!&fNVn,NddR3ZOI<?[("2;^-!P\-g>[?CR/%`[3?0*p.h`ToH^A)U%Y<GI:@g,6X/]6
%.%B(7]7)Z#Ci$F!^SXO05+GQK<i')GHUl`DA/2<'Ir4Pa(%5MqoH2h2X`!SmM1qaP"j%T-AH,%]_fNE-NIHgr:'kP891XKjbJ7c3
%(@:Q4,CP;hTqOs,Q^nh33P;?5ZQ$Xe;5qNKo8E4C0@4e;g:mFmYBi7^`3"II1#7$+K7m*Pe<dI\S(m87^@3O-j,QI](EaJVCuOQX
%G5F\9mWP)(%S:ulJfV8W8N%+`<8YTZ;o8Xub\bU-s4GlbC_1q4n'*u_So>88n"+@ecaRjP@eXu9810*i=0F4d_s<aSS*g/GCAD"_
%1&4e=Eg9GKPBIW/[.u:(S#^k]7A?j%CLDhE)25ohBkEMFGb#@i<-&MZ3'O_`eID[2L1OlHN>,JRRC@KWRC=<:6*oAls([jRUte,&
%GcBX339t\hM?UcOB5KtYg&[,,f3b4IF%i1;Piq6p5C$u0ZO0M"+N*:4epcOUjc>Z*6QW5=qsA5C`<+:R(_U7la/=r#^c#)Zp9q/5
%/)/B%^LGUq9bc0SEr.WPn]jHB9?R-69&"o\*pY`c"-J)^Ia>G(SV070d[`PK6RG"BcZ\MG,sLC_-bN1>A4LTVKpaF!;cVPkUUE-V
%Z"ur=G3@irZeDI,!B(sjg#`FiKQ]@,Z\!TgkOHN;L:M;D7H!\o_H-m():lYF4mO!6eQSK`\:*qq98e=a1emAMf!"e$Af#eflQN[*
%n3p*-Pnr?JF]`@=c+[0r*8S3*Zj&i9bbf#qgKkK4,;cNFi]6ILZ<B?u)UgUIhi_sq55sBE]fOl^m^[?93?DZjD6F5j;W(s8Vh.t2
%rI_TpjC\rk7Q,-R-[VqfQ'O4)#ER67UZ(YumR.Qr&XKY;Lb\F$J\dY*N!K'_M,Q"Ylg2h.gZ@(E*WUl4@k(k-IGLTDhEQ_f!`j)c
%lUU8_eD201F-BSk>L.#f%o3,XV%%o)Ho"48_1EIceONl_385N_(nnWr"#0M$mP9!^K2lus9k0=_!jRN4qt<FrQ4.SDiBtG!-UWGe
%6G+s:$9?X^`V\7JnfI_l)kld+H2>:"l*96/(aYuSM0b-V[_-b?g5`r>iEa%d73Un!Dee1pbL=r=G<'-_QVV6)C_9^#7eMHs]/lO1
%cf!*_-['[jAK9E^$JJ/sNH_b]9ntlU,8Zkp@#JKt3Bm/@F!&&_K(a5;$9-L.iTuD/O+J""OfRWKNK@.cmgIIkW\AchmY*?i8RqNp
%\h"J1d!M@@[YmkSO$.g/Hm;ULhm=/%2c72>_Os/[r;g4PXWSiX"bAr?D+S+oHgT#=e"EU5)FL%na(RDYhfZ7-qb<%7><&/Z2ohI*
%S\<=AWDQs71oI(;7DuiPpR?SNC@%s>1P(7TcR.KS[I76nGL5,2K5U%6F(&-=9&_ibG]ti`-s40QcoW<V0Qq<bc(hefhj'[(C<)b<
%_AdSZ2j^+[9gKtVQA^,L,;'>8m=:\ES91:'EbA85?h!B&nL1`Ul-FD#8S\4XV56b/]3rZ(2!mC[N];^c.Nn9Zi<;u/E>q)7`Ed1=
%a@MX(q/f'?<,C_U,bZ:)3S[Tt^-K_[@:3jFPVLhPLiq!/iu$pUYp[-)B\L6C`/du0mZVKC9"+?Ua+*JJ;cD*bSeMC[k3qjlgTq3b
%d""LTd*\ug53!O:>43oEN9\NufHbUGp)3O>U><KJb?dXsEV#ctf!j&odN..iE1lELG21IsHk[\6Y7ICteHGAB>.4flO)FA6&=lW>
%:2sE'+X]m')q3(u:r]sLiJ/b]Z`Q#tE3'1;+T6^)Rj6sp,?YV(G1Gi$paEUuU5L(l`u:#;a2VA,IrBLoo_@J9@5@P493^-$h,Uan
%T:['G1E(:k)foG5IF[G:>Bi'ui<d_-2o>_l"aU&['=+rt6E(;8Ps>>(-0/?WG@Sq8oPOA3EN$W)VA?W/jiaQUc&\ZR.<0e^hp$rN
%+MK7_1HuXFc[;.5c5),c5PjF=>=meq0t=(!R3-ps?%?-(FC7JHqs<,8pPaO]amj1n:+1L1N&e#FKOT9-U!joQW+YRkVW'Np]))Q"
%c&[(@@K"S03SGEXU%@<>pXGU[f*Q-3Sk\/@\1eqenoE+fs70A2gg`/$Z,#'%n./o6](YIN_Fck<5JQX-$+?I#?pDDde^#HFEF*@a
%3d^K#PW[3t?[!%!hu^P3;PdH_Gg.GP"u.naB!_!qA9aPP(u/_LhD8)IVLslrBGm^a>aN/k.+L:j*&]AC"G&-346U;cD!<1u92ga4
%reY^i6^&_IW8ig5#CU:/RqX\85'5/f!e-f'ERk.k;SamJRo%NL22bQp.H1Y\LQJXgKA?iO76dmL/j.odJ;*F!?Baugdmr_h0D"Mp
%!tF8EMAsk(4At'=4uQ",,FgDLQB,S*T5ZtiXsfU^*]eWYk6m@4US[3J31naaJn"QN_P?:5^@57=&Nb*>kAWWB>b,!2&\l]3DSl4d
%A,/Uh>=NoJk6m@4)f_YBH4/mDO6'k]>!Kn"`6enofE(0,SVQf^k;Gjq>FR'-_+5qPKrB,P>h'!J,-bt$+W=llLeV;sQ8NasV_M6-
%<hU7#<!@22Gn)+kU2M#S<C)Z8cb)@<47kn,<@)HPH'ruZT%oVI'&kg-g8tn+[er6.*g('*'[i)YhrUp<Zmn;_bHnp>fbbLf4";C9
%^[['7iJk"5MN>1p,9Eq.;t7:jOW.S7Ad-3CnMHtmpT0Yrh/9\iP.Tb&6>OD$f8bcVK_$L@Hd/,kiY^Fp>Fk@3,<jMU2tLNBLY_b,
%QedAOFi'IJ/u*+4>n9#$:7ti=Cdl]:h$!<q@$Q<_FML4S.kjdNk*i1k?jTW7pX&)+q2B(V0h:G:U%?7.s!)qmI5t#7'=+CCfAc"f
%(]tYid:P7eTKN9Q?Qf[70fIb\7\_b2YInKe_N#!!q.628ECR#G!X?2F;=S<d0Nt,&#(eL;`tWtkbtstL'L%;mhi+6lY2C/-d4k,T
%``k6\9lFN-2QaedY?4Y%&`e?f=@-^@ms=j*M6W[]e(s[*p,Y9+/SYTtA\E^U?><=\3amaLa/_&)W-(Z/@_-olrM[*m^su11/a@0^
%;3`J]mqc7db[ZZJ-SToqY++`F7F9lMR,-VCh@G\%)f]2O&Wt*1BS6snb(ECfH1L:^OB(3&gNr@3#B'kE^7E;I%gJmC2,JN1&-n]V
%Sa]^k^rP7saIXbg-2K&R8o[p#JYN2S[Yqa:&QGTUMnHj5B5ihuL$ST+l1h@d8<G*C4PDXu#pEDY02+RIPt'f,3a%=E`u57a+53A4
%6D20tp!<[qik/.A0=n=:%\2Q@o$_bbC&6?RJ+!_mhq(Y^=&h!LJcmIVb<s_a[S22)J\,fA8B@01q:ML]YR,p(@A.W\mG<L$qe:JY
%Wp!R?0XL9::"m4+o<B+AHP=oW!d8MU]%jt2"rhi;]Ka"elM*\l1=e'JN89u:^;*;cNTiXF05dD0KUf9eO,&YM]s09$W-GhDGAl-]
%GOADq8)8hd#E<sPo"uRg)DI!E?;+27RA>P`f[YngKH9=UW6j0N7sY<P0LK-Z9TA_t+r^?-gHP`>'6@/@-Cn8TXNpN8fHa/u[kQWZ
%iKtu$7tE92.LfkqhMZE47'h^Wna$"YB8q=oo5qe3#!Jts3"Qo;;5A?`9/%l"7dZ!!S4:NoM(IQk3088%2#TK3kb?8A4O<jN#"dZ?
%A7"b><*pmA=>mk4a$rS]`JsEO0f%(7nNap9?,s)N7-=<MK@(!JbiX4WFXrubc]NK-L<b69k.0nfpMhB3,4e95^GD^aa?74Mo=I->
%n&W-Rr%`R>^=;bbO<%0LLVSC#ho.`a!_;-6gRL+.?I;D"&R<jrTpJW-B<#<mq]'p9\H\O0k+]IaH'Zf^Y:fLF!([Cc2]X6pT7A\S
%7g,ut4*nXko@%BC?gn8'Vhd3QaC^.OB_uKU%jP\9]F%nVO5Q@;70Z_6H.qSn#t\(](CGT>@%FPm=.NB:S-<JgX1m8R<up%hMtr0R
%YW1HpU_;IB&D\@t:`S[`lKp^'iU8kr#W<LUGK`"W3_9d!B[=nJ\%HA[**RN\_r?\I/\5F/]+.3K[#SL`*#^),*.@I=D!`E;[Q+-M
%]<U:&TYd$R5Pc'>HhZ3S+Bb.*?\2g&gfe':A8+BD#KbCn4@-8=0=m/R,Q$G&Kd-_P%@rUe'CLqQ55k"4HlK-h['uBp4PskTs$:qH
%c_dm3GpD`=n)Gtg]+)mjW3h!Yji(MPp)'#QnlKY6H3qac65Ei2jb8&?i0]<i?NhOsFS>G*9nBkE*3=6'iodpk&l*fkE#Erb6W8p9
%T!9F+&FHLHe9]isKU%;KT,_ki'n%jR@d2mb+`<72HNm.[c`OE-T_NS^[I@R9h$(O1-P#PO[u9+EHh?G%a;"M3YT#u3No.:G=2i5X
%=QsV%O;hPR-sWjDCoq:&;k&K!<V(t$"/!?aC9F]-(`.Og)sN^6c&Kq2]lrAI_'c.;Wb:MGhP.kQ@3GYj9?EgBQe>qG(J]WX8/uf^
%pi:`fpT6`aqV1AT;R.>XG'=rBm+3.-PVTJ<#[qon)o9@>oHs-<:p*UQ_1(/13KU:d_:q;Vjl@nGh9jufSI6NJ*863k:Z6CtfU\NB
%bVcf8p^n5,B8hgu)II^)_1"=-_ZJa[_LhaO(DhP2NpqB&&'AgeTO>NT=CC1RF`=Kf7mFKAC/(ejnX@&a(mO?cVa6GoCZj%CZCC`C
%?PDp1?&Y&EG'=M#a0Mtf02F-!HSR`<I(WG8K*u$dEInXH)r)?"HXkoROK*Tar0,6K3!Wp5&]>":M=nT/Ye^ruVq5Rk=g;h\Dm#-J
%\iRQ3cd+>SB?u$5YNIi3g1ShGn!B)><IlE-LR_(&`bd6IoaJSCYKNF.r/tLu'RMao2MT;2<g[O[/YoRQ&[s9Df`Z_SI&G>'LeYa@
%F"dK(],Yf.PKVLNi/@R;pA(-?3K!#`Yg4u&&%h+T$1.9<+61(#*s;E<UAD[!=2+h66I%ak);#`bFS7YtYIEoefR\I"CD4Geh.'h7
%EZFGE5%,/h7pqrr<1iVedp$4Phs/o]'`/^!k82\3T&TGqYg<"[;,j0?p@^/DcS):/m+M"]Yg;bE>MIt^%I=H^?L;rET:\i*CT*;F
%I=BKRU/l[Lm.6/#Mf>?#$1.7VC?2Q.;i;.PMgJR]@pkpr'Q*VnX0chYZ-u='&_P]$V=bJRk82Z]+5ulKYg4u&DoDYW_-R3?r"ALU
%=Qq]I%oeL/fFf%+dX>MqT3jbPQhX%XScelfUA>"_V]UJ<IS\'Kn`X1b+"T+,lAN4H%'5SYnNS0%q:u8Kq%[U3I"Qo=JUQ1JO>Z#g
%8<>B/,Pmqdrn`Y3cDdaRe8EbnT(+#ABVjOo5,5\PHj!<Up]\/IrP$6(r`p+u\+moOSnk7$"Qm/IWlhfg]a^U#!/4ZrLI3:I[E2P`
%`4<Z:DS2tCY$MXs+1nNs]`R^]D'<Kpiu+E@`;34'VQ&JJM3go:nm4uAA66fm%FH!]Z;#>IbrWE504]amleD<_5P@4)ei!+;HMLqG
%?&kL/s)\'3f_p<)6`#Aes6Gc%me64d&`GSOrqHG8[SQ(-q4HPV8j'\]UW`\-fe`:"5OnLtqXVDRn$[#upUlchY$T6a_L0fik-uKX
%\B/<T,!>G9IP:I\DpY;-b;2<%oEF66S^?1DVQ[VAV@auQFJ@rsgjMC<`%ub[WZ):(7eL-lW<E<h[";`jiPZ+<Z<Gu7PShq=?NhBD
%ou9$Hg-5?%XDbZY</Ub'4$fu>C9cFSGc2?K/Ik/icEsoTYWm]+SR0.s[PT_4ScaCD.eXi!13CN0.%&BHljh-dgqu.hmuZmO[-tQH
%@BeFKI,2!X)q(O0r''j'U9f@d@W.cf9t4RUO:JpZ=dsB8l/PfpNNS[Pn&h9B"a9q:!`')&*s,rjf/ifBq]U+s"\J)(4<UD_b8lH+
%,fYCVeBN`.F$J)W+D0C?MNRCtQ=rUu?8,&O)<o1W%'2Pa_E<3r`()2.qdV!4ona%eeknc.-oqj38F\$Wqr:\+qP/#uT<LW:=eJsr
%HiJ=K_>UVlp\rhn*l1qXFj_@an,;Rj<U\o'5@NsD^&"q5DWJA&Dkr-r"?T_*#J'-FeUJ_]SfQV`2e$'D'`:GmLt'AYNIZBU,&s3A
%dCqi^dAbc.g>-BpcB$W+88A*\p:^@q>^OiZKljTgQOhaiV"'J#I0c8hWMKDVFKpKC(0SrN?t;SeXfn7gdmNME*IVk^+rEp=Frl(H
%0KnU`NsjEG`3^UJ(ool-G8*U0^MS`NdiJSHbh.JGcB]q/C%-7Z*?A80Ur8fGDl(F$LHA3^:A51Mlbo&hMt-YUG\bXk\?T"AJQ.]T
%^mWfsVR*eelcoU37Te/aYg_h-l:2VneY1$>#\"c%f/q-qCQmS.f>"iMS%o[Zf2%;HGC.g7>IB',eS/ds\.$is5d4%(\!uVUhuSoY
%Xq2UtlTmT6Rt\m00@%JZlGI2#p3%$r&dKa6NF+hfT9.(Lm4;W*hrW+BbheEY=F'?t^R@3u=KXlb%.`$DM%sZJI9.gG;_+VgCEd6B
%_5PfW#8@eq[!Dpt7?MktZ)a?-\?gmmVH_^NGp>`>NI]Z[i/kb:f@,<kR&a2JAqQfhNNmKpCuucjEH0dd?#]T!BVD+(kINg"HR\#j
%9a(B/]%uQACXCUR1EeJn-[K`B?>I]RCdP^;'nS&NVH87J"(L>'6Ef>uMG]0F%-pm`rmFA'Y/]+IG*II`MTgDUa`Vsc_#6a8s6k'r
%2B^W<%LVkCF$11W[94!;)=Lo9kIS'D=hp)AS4_t7^[.'/YM&#rTP%>p=&n(@@O*Bcbq?*<d%cl7:iC9_'.57(N@&ZWc?YJsA@`Ya
%^4J!rM[='[HIZZtEDetQSN.>C>.<V_paXU%MGO/4]ctOA#]9h#[-7tDNIVhi`/Us8Fj@/qGW).Ai-=1GDl=GBlJhr4&QNrp!P"--
%&!)VLDT**HMh"+RZmqX]4>i$@Lnb"O@kqH;_BZuM%gLUq9e75%"5!na(1rd1k&NEZVB3U)g#i'8YTXE\>B_U(Gj*lHH#K-)ECo0%
%1!UdainFOTC=g"UHPUi^++`)>Xc\5?Rm(X]5A[lgJF<0\3dU$raF;iD5L."c[b-Ts*]gn?+`5/B]<69Y*)SZNY%i>'F?\j83=^oj
%T%&eQ2uE:07G!6BY,$u0cM*D&cNn4N?\na4d=srli,_B7l2-Y5p5AY/Gr*Bc[OH)*G9(<db&na$R^VE==eN:C."BP:$2XcXV<u@f
%qmb$Q\KhGdN:SNRi&J?Qf=f1DeWF"N5lrcm'%*!pWR^b55/iiIUIjd=W9^t3kR52-Udi-W4(5+B?NV<_fSCIl92kH="PmoL^#ttM
%V%se?e5<&2S:GcbBb;_c*>S02]*kbu:D@m.MRT@=#2ssY77^nCGXU=M3t=jS)W;d!LgB\66P;a]Z"*2h`sPCs)is26$9M"XUPf?T
%;6/=mM/hPfH+sZUCAd7K:+mOXSNZ"g,fYg6N3eZW#t^'pNu3"m(ESaLAsq[2QZuZ,9gYS9L]>5&L!^>j,'YZqAVD@+0?iY+AVKhc
%Zhn+DXAFFUs'(g)#-=WtI9BuKgNMC[<]D;;%IUuP=WsBfrbIi8qE%MnX3(_<X-kt&hJ1ToKng\_eZ.@3&)h3`^$X1-9^1iZ_f/#l
%)52Djn1_4gdsYVspA4D^X&p/Z7_dKR0,G[ahf_!-6+gh@@2L2eh"?AVIbq_agEA[(kiorO:jkO:*KG4T:t@W?)70LrnV)bW[iLM$
%I(uS-iF.doST-;F$kE?FZK]8\LZ)YC0k&_u$P-afHhMXA+mKi7L`QL"h8P)'D@iN!bSTQBF`QGLps\k@hfNqu@1Z"Ah0'XuN$-]*
%LZ-]hD!X4J_SZlO.I9&=5Oc,!&YHS@XtDgF:W8+QlL)MV^Js!N4T*R,K*r3"%%[@,n1Zsc`nnAsrPHHk8c]D[1psJ>4S7,M]'V3L
%fmoihW!a-RD`\Y6CE4VUQZ<!#Of7cZrkt;sfs>T?(]LlaG!669>^.+R)L.QFh-P?iPKI-@'BoA2_sgVl6V0>Ln1adK_m#?Ac9a/+
%@CI7\@p0s,4:K!lOKWSK^@8AUn@63OJ&C"N@uk>$(EW;6WlMgB0\/C@]jH"$IbS</-#UYTLE55Mf^4BJ3#1t+K`Q`ZSR6X*\,"V.
%97UJWGSn0]B%ch:_Sblt%\o?"nO)t:D`\p>(HqM7iF-B&S*Kje6QnEe3"d1p1)AJ_iF04#\/en#(m9b=HIF[t`@j=^fE\lO*=fmW
%I,SM8\&A#iiF2L>(`mL>\F@iuN6PXeq+YX1?$I4#]!juehCgu"?ep(?B=AZuqGg^(i3ItC&*'fUHbAi%*hq<YKng_1&`%WoB%,do
%LX*g1^$Q@20YLb:(`oL=T&THgiF2M<&$3.0/j.(,M>N^sHT&`pLZ'To,8%+9MLFGlphbd2f"6Z_^[R?>j<(15T<NP=As\J&>]C]B
%=',m\nR\4LZ`\,ZH/9%Q^'d+4jh1VLpC9ce3(flE=k2MLH*&VV^]82_Ectd<_R0$$Y.Jg$AWFrgo;%GoK(YeeCauQr,ai9<P,Y'D
%j&5%9h6^-p<*+,<E+Ls[:"PPrQ_+^]D8,C7[!/?mT0'`VSY#kKRG.GkOEOrkf#Kth2N6^&Z)!PtT%:ofMdK\PLW?$"qWIb#:K(&)
%0A47[Fa?:.9^2l;g=+'pqrMSWr6Y6/G#:HO5Hgs-^W(c)cY3.3UDIQb+8UDZ\o_42Y>3\5+3i,gk$$"h9)^eRSJkS-[uH5O5Bh<a
%^>?kYCA#40!dhX4e9'gCiqt9o:-G[)Q.O?_e<2l#-5AH42l+<oQT]';Qoo.BT5rE*<qZdc2m'=ij12!Ns#b;\&hd/+RJ@q=ocQ39
%"7UbPR]X1_]n%gqk'qo?ia!@=%j#fX0;f7?A=ba8B1&lWr-FMRB%PWEpAF36eHdUCHa;=(a-33.I@DiaPu#E&DD,&1CX!992Ns$l
%qDD;*,tg)-FcV<Y-GS[]g(=MJ%VmU^1:^`$\<rAtb9c`88KE0L%A=`'_OYMSgTc,Jg6t1@"e]C^o;dfb@q,$[Ip4=.Zhm0Mn$gWG
%NMFbHkZXjs['u?8Pnjb<Z1jHa+)C-DWO^a*G4k.sNb#K1@jI[<6<BdA?0dBqBfYj(db)^3LUG*RA<W9orM+hg>2TAMj"[raFhL0B
%+pC00VJ.IKS@/&td;PIiBdI?EdhH\ECca03N1QX#J'$/Uc^@aj=X,$5=Vd#k`h(ujq7&Q-5*BXIB9R_u9_4kk15.=A0MBjMO])"c
%M6FegcL.ht2tcl8ZJh\KcTkX9?$$2u-oac23.cE(GVI=$+9Me,bu^9l$tS*3T/<k4BGQ&@3W70eO63+n<@^(]1qWT]hAK[akR90u
%n&uSIb83.$agb<"QZlKV<:]Pn-N<q3U@ijoB;rP&Rg\p\7`ImNa>W+Gq.5toA8(&RL]"Hh95EtF:A!Z?da%!>#21\hd5k(NW+S"e
%N@QgV)I4:eJ@\Ti<nA+$2N.5&r+r-sI[sb/H22TEhqq/"]?Sba:tUHn"'jjVY-=VDlkGaH:XUmZH[S8E4?ZeiP2+F=-fa=UqqLK'
%qYA`fAa?dH,11GQDDP>]^E1ra/&dGuASrPghT.<+;"X[cBsebXdXKEHC/jc%Rrh^/Ol7>=#>+jhSmGLm6af-er<Jf3lLZa[q+J%,
%fNS2,aN%LH]uQH@IFblD9@a%;XlTB`g)NP#/%cbUW_ee,+5_Bis3+'&pYS"bc)lEkW&-<%Q'CS0`7A12k(,C'l"V4+lo\"sVmBEd
%gje\86@4&t7DDX1\Z1iLa0]1AaZh^KVWhHno+uI.JEl*o7_dN%/35@F?/9>Z;q[R*@I*D4CX9<R%p^YL0,V']VUb45V5M2jbg0L%
%7NXoT``SG9m07A<LG-&H].JEk"g^[>eXTg1X=N#UO,_I913Ch(;`S,fie(oSPm@lonmB?L\nsrJbH$?PpfV>&IW'%8j`C@[5^^1q
%rQt7%m.$!9Cj#:-khZa6DHu;gPIBp:X_(aDG:b:U9n9_#47\BaA4%^P]k/G9B]qS1=Q4EWoP$O<I;PPZ_,CQ0ph=eNp>B1>0paF]
%qUaiG:Ud1Z*T:?9CNj5$TE712AphVOPVpC"Msp&lHt@AjR`PE6qptB97Wl(=^nWGp1?R-4k0s3RM6'\r)g5<<?C7Dsk`@fDUk5nX
%<IJCcc&sIPH>F%lCcEYLWm6>t<Z3l2Nj!$bHV8L<,]kS7'5#ba`Rf7(pn^<lUXb\D_V@*/B`XV7J[["$V\c$;mGm]DNTA=2D(_6&
%8[$Nk2Ni,RiQ1jTZZNR9S@a+":!RCKcB>0Ud7GfN:X6/E/+fH3EpiFC-TTXlc6_Y::Y#n0Y2?E&mpOStCFl)/Vs+%p^Z8egY41[8
%QYb;YgF>C(]s#sM1J_df;eJ&T(Q6&+o=I5H4Yd@>O01(:(=J3Nn]<`$Qp6^YS#FZlj[nfD2_0U(-HYcRF031*]I>tgm>S.h^FgP.
%?fX*@[Y4R^e(,E&ENS=#<*h%KeFLlHo'I:c0pMUZnS38NTB:Vt2T?N^c29B>L6V]!0tb`/^pPL\nluhEMR4PSe)i+F<=JTu-k:%"
%$dLis2f/DT>5?mln]BL5+g:3-SS!;:$d<pM^R#&c%Yr>ra4[l>]=5h.qWt2lq.mP7/6%"AXfLd4ADX.^s'/3$\U9q'&sf]od(-i^
%@RI'lQB/mmb4UG<NNAR+`YK'0eeY^:Q&YP&l-lc*PD[$H\XlsMms\7"9"L+far>N%eFF>0URef,pRFik46muZ5An4CV[^5D3aZ/P
%[2(qV?^&UA7CO`uId&)8mbcg$c27:4n$;/Yh^kp(\f1ZJVYE/)=ql0SSXg['9$ViC%d9:+5Sr2P6nhF81ch"q-g,*maN-HT0peEV
%c9ERe.TJ7RekY\tcR#U+9$J8EN^LI&5l3[cVYb6Q^Boq)CNbBdYKCW^qocU*a7_rBlcD,8Mr!d4+)Ld/c=+d<IW`[a0Pt\AK-QF8
%qdo0'beCMJ&QtYel+g1q*uYla$uB#*q7,65DP(FAHB4hKN$7%=@IJ/ImsJ=%'1'A\(r;9tITl'9^hi6$Wk(8A0\s)*QJ&1HD+sV#
%C>.+1$dQ>NfY;`NBu#ksb)6@mXML3',OgFC^C@QpNO5LCe_SKtqHQBk>CSXr.caZ0qVM'RI:4UT>A2otmhehjCVMJ?Md+I'k@;4%
%r%QE^JnpcdH[Ol<83*S#7rD"-E>O=e?`tu$)elF"V+e#:D@:f-r:OS<p7AHEgSEdYa="9$2o]$*WQOV_qSh!Gk$g@&Hme#OdT;!f
%T0$Zj>K,T$HL&!rqSm7l4GSdir?cY+'XH_`G>Y@"Aj&mpFlH_ThU1LO*l7!V>s'4(F_&7C/RGSr^&],O;"ElCdLS+KhofenHgbSf
%j@Ypli)Utub(c++E[bKX<IF!'^HB!Q?$238'u/&S<]G5>HgiBZmm-P&X]k<j+.S4-O+M:7o\5KDZDPoaa5_#t$[0*MFoiFtFN^`*
%Vf,X"*BI]\^6nrHN_40;&"V$%ls6K8]XobfM7$+QN7]'h]IX<A@=0pKmS==6A25mja?N<:AE"Ff@NUr&k1`O>7bKsJ'@HWl>,K!E
%^V6IMVTJIOF\Y+mKn[WpIN^pV18OrqI,dF*d"rn5nCu'R<Z$0T2I-d,*G3Rie,2]7`ocF'qc)r8T/NTNmVEhPWr9j,%@l]Q4@)X1
%G>C7JYVk&i`rF4$2h(?-)<L$so@^.RHP/0_a(oCIqr@Lar:]jT3uMMWc]0&j>gLQ!8U!)SG2CY-2:S78ZbWZEQ#pqM4@Yg841CdQ
%ZRuX@adCX`9C&OKFkOk<a0`?P3aO3"[&%oualm-me'I7Jh@4#H0`B.oD_?O:cqV<NAEn>a/X`VRL#h$!Bod_59$Y-K^8G1a8+bGF
%O_-DASNflp4T3FN,FL-`W[?p'E]8F%/Au0(IG(RnF*ST^f&%L-^7GpY[\iej&bNT'm<0f3%hJQ%q9Y]-Rb]Q9=Jb\!dl&EMmWNJ0
%DYWXKRZG):^I8Xg:CB1ekWN^^iKJ*S[*n_fmbC:8n!s>5d^uB#]%Kl[24B5W<UH6W<slLc09`MLr"_&0?_H_mbgc8s-2DU/`hZ!!
%NW$]5&Q;=;j+iVQ>Sl.#1j=5FgtmE7n&nQi\*itOB?FfkooC1Z0.,#WCMrHS-2h/@/Z`$3^LI]Aln=MuWmFA@QEPToNUeN>g]Ch1
%l^<[6VmZ1M$f(Z+3\YmtdlK*8hgt(g+bpl$On\g!aPd;7X0mC=jR<53cqB#fnW:B;*UKJ"q`Wp5LL/dPQp'CLp7XPs0O5@s5%K"9
%X>U9Dq'"Z\M<9l`%qmM(ota(1p5<8D?d>BQC7d,N`C=]?UoK1n4b=+Aeq;8\*Kgk;p79'YA8HpK*r(DP0A1b].f1jOSo-RS`Y2,L
%g?^`hU=c5Mfdt`P);+#^1k4^a^<1Qc7WkcI@`g&V`Z;PdA^ZdX7Kt,'/$3d(/\Cp*.=M&F[^g,G]J>b;98Z*.e2*B#Kb_%@j54-j
%o'^IbREBM$jT(Y>V+jJWmVH\C`mB<Q1\>FY>gf31(I-3De"5VZ4ls[7_.**.#X7LiQbDb`H<O?IcFl]RCHlEh]EcUqe434*hKd%X
%U1)A6236Y^-j/R("uH,8bOHa8e/5%Egu']UAl,>O(;+3erQU=kT2*jaRslDC]9A/Jg,?8C2*ne3<5Ja="Qf=+WJ"Kb&nl!X7Bdii
%ZOL4OCFZ9<M5B8HY6QZ><WY/A?$nXeXotdkUO$$JGd$X`R%;%c0^mMDSZ<dc^`H->-%NdujYlQ2?V.^JP$727A=UZD\o?*+g\8_3
%^/G>"pZ^)_Qe!S#l6/;4fGJ9]neA:K"Z`5AKd=H=No/s_?IH(8!#(XuI5^%u=Dt<tlkprQaJ11s):`:aXP6>l'+!oqFtdJ\"ZarX
%cHt6]5qWs/JPAd.^n0,iBfrIgERXCtW90u6VVP!2inb^m^Rr\j;Ji;+JV%Fm8L)iYm:EMak;F\c63=gJi][qmIl$8'"AAe6_%K"G
%CGZTC53dt=Q]BiXe=T`$$PRb=dsg\RA.u^#YKN=d3uQpRV4g=UA7^Gd&UAhQ=116-dI!J6Sq&ORqm38Ni_%t^pmeTh$bp7S'j^)p
%oaXHd>6uhsa[S+&qf4aJb5`f+5GZ8!ij?)&X`aM@Mej\G,D8[)/GM,ffEItr#_'0Q>?]g6m*$9W*IsZG[UU;u4n\cEeMALtP&@F5
%A1*?WXe!12!bjb]9_:.Ad;5C];lPSqLbPPHq[YrP&_;=C<Z*RNk'TtLiamR!mI#+?2i,-aRrJWT^IakGb&hot\W:Y''$EL$T7#&W
%X/X-TL*^Zmn)_RU?n?_ChMqfRQH!$]iejD4+f'SWUDBoef+:ippefbnqA_ie(I(Nul#R,EasVX["@hAC-\O><'0ePK=!'b"fdS/,
%pRLl6)ML.HpBa:.MH]tUlYt6NbZN7)2r:m1E7)2#U/l!>%Mt*D/*`@r]5Z0-Z(c?P]<cHRqC2bZs3V`&Q>`Y&cEhZ&50Y8RGt#%5
%$eSW>:;n9JZtX`;ElO=mH4@tD>sZp!n=:HJDs1AbI3ejJeC3!i1prX^B0.SbJMbD"rM9`LpKpS*REBY6D7.s;gd6le[]8AG>C1h&
%948bp4KR$2LC,[$JC,*Q`YisgfkAJsk`t6D2gX@&!/NS)[K\91)H5>!]j.sLqT=@7l-K7-.<"F^iC%2$3[L<$c3Wjhm3f3QabJjo
%p,4buES&X51XBti,a=6kZ8HC-M7]JMcMK^&pWCQaAi=EMZ?eEuaIIZYbK]'Zjg@uZO;_@Dq(&ec/'F9e;SCF.QS6M][.EsWYE*_+
%SQJEnf$?:!GI)V0r),25'@o$UqND5/5qI(oZ2hUY"<e$$G`i#kgOA#t4'O?"In;RL,*4LRmOY\8:J)S%<o01E.&OPaarBFPd`L"j
%_Dr''asZAK6cIcLo6Hl7J3%S-O5$N,VaB5;Th6W`'.ko*3'GI2lZ8&\]s[fDCF-U!oHRY?heH4sc+@1/Ip9Fn-nMPT^Ta"847(LG
%D[C`"4po]+UsZ:_/aa?*CHabMcXs9:/+VL;V(RcZrdkDV6*T\Ak?*rAX=W5-:@W$dT&#VIm7(3&FJe;d3cDgs`05OrV;%8:T=4(T
%50>q5\2p5YB[`p9N"m=</j<%bJ,M"GZ7bDR]:bLrNsjFDYOB]i*tL1iNF/"[D'!)u/%M3Dg*sIO]X-O&7g_MeiNhPZO;5epQapLF
%hA)]d\!q@@0Sk#9=EXfXY5>W?4R7G*X,h?h+95QnmRZ-4=je>Z;HCiNDuKYZJhu'eSR0!'P)gu+<m(%oPPT:c[@u[I!peXJAFM-g
%YXV4125l^bO<kqHQos8iisabCSKg.BNg#Nj/DXIp!G,#TWgUcrGM:Y%;Q`)iH$OMdqW>SqRjXd:46jMMcY&,.P7+S%WQW0,QM0']
%P=iuDccYtS.=D"2Ig)>5EZiNl'.[jfI7t9E7aLF4:NP3+3a8^\PqV^?V<+N/Z#6^Ua+$pYRoFeUZQ%Rl;0.V$KT5?oQpoTPffnos
%AVRtkQ[H</jQD0O)=lBTfq,jJ+-`&GY!S`3F&D%KPr+e]rI!MK=H`:B"_m&XFiOFJqbN(KocV.!n>o<c*j"!0]pD^=e7[kdWBRU:
%:3enuSDZ$>LB/6so#&\Tbr;D:]MZq6A\n.U*=S&"a>sEXZ^X,PnQ3nr=nk&FjSE>pQhH%WDp)p<N\8KPYEIo1OW!nPPd(*jj6nLN
%(?t4e_X,LhU3SU\H<>DQSB*F/;4W)NRF9r8MS<lahQU9P\d/Xm[u^K:\Ut'@#P64hp7*ja?hg@sg9hBd*WERGZc9@8LjgqGd*Zuk
%%'6KG(f/=XA/]\oG&.D]9CHK2\g]bMK@?Z@j)"kV%SiAI%F(a`#H(5`"u!i@*1W*,PegFil!j8#A(1d4q\jC,CdF[s52RiDS0'BN
%>H`R`%Nm\`Si(TiWUGdo)IJ7^JYrh5oS:,+lhTTTSsA.^H_.RljdQeDXRsqf<dFiMCaSh$!P^&93o\lll)&H<V89d2DEVm<*>BQm
%PaRRAPFd%obM*Q2&p7btm-fh(ZhAV3UFH%W&q'nqEM_`)4F9%Y@40CHaXHJHp<1hNiA"p:ngN^hEnYq"ER-$n#2m5)Y,C<jQ"Mj\
%oX9Iq7KL+BnuZu2'(0-RI/Q0N.cK*`"FEh3Mbt#Mg?J7:>n=p)@oNaBXmcF.k!OnG;p'Hh?I",SePdGLlgDuCb1bAGVp'UlM'Tkd
%/LV(T.)XI=9Y`f:VkrW5NNKgX=ni9>\qU*!4D>L"[o9sS"?&o95[a<p9uAuBO&6ISJ/)"6dNE$r\sJ![Du)U1N<+^1_/;a.\8=RY
%Af<SR:A_Se!,.iM!@JF)3XrQDG!4JO_r_9SM#0T;@GCE$^deEALR<hN4G07s(tl`3]`jj;2be'K7bd!/94/ZUo*hVCYW37(S^L:4
%r0aI&;\Q)N[g>Z\M[d_`RsS!cAkNLVLgWmAZuYQ"2A=Tgic^_-\#&o.'"=]k'grlE4)Q?#6;-XE+Dsg[D!k.PD'l3X`ASps,b:IJ
%hjrJ8.'3`E`baF-&5L[*@N&#5m*Z/JP4#2&AmsGQC_m#6oPAdDN#ooLH^LV^jsF6=;TEll:4,4rr*JfW7XNt>75S.L+4&/6^a*'l
%Q:CWW?`eJ-nr5!_;YFa]P*RG:Qa/h[P`-%^gSO8_(+%d1$/MHEcP@fg0+$C0m*?Fn.o"YKAUh-:8,eq_hbrge(?L>k1[`"Nfq0ig
%GIoqEQa/h[P\_$>gSO8_(*tP,kUpFr[O>9m_KIATg7kCdA+sjF4-XL&*l$:4CeZq-pB4:WG"#`P>=0Cp'Fud2e>eJ!9KED//O%IU
%XX0(bh/pn*!7[u\ZUV]48BEsR^K7KkfQjYPq9]p?#i8.Z3sk,qdqO!-%V<E=`Ap#JJ4h)1,^pu*F0\$PAb7jkm?LJ)90PAO`N6`d
%\2hs@NF#atK>P!$c"%B,Fo]u.gRu92rAIeu387[!Rt/\g]S&d(efQK$JeWkJdms#/e`hIFZ=J&$3c]Egb@DG?[Fd0&GL`8&h;O=-
%^oBh!5Nu;`4l^qFWg2N<-M_t>I!&b5Il3UNrjYgSXjdi<s-B-!J&r#_58*c&rR]7>A0m^AFIdg+l*goD,C`EDm=[Tc31qY<O.#ZQ
%4(!8I=6d2&oA@IfqsO=Mi,UcK=@cQJO$n=L0hlJI*f2oic*3tn7r%;KaBqhSSc3^/T96n0EqD+<fcteoCOHi7,_pk5W\pM)?Ym3@
%Q05>o\RfDAP%tg<1)ZbZnlD`URcU!?V'[t0[C.T_s0VfCP\os_7^`$^T(pW9V-QhYP<WEDorhP5-BYj?<Tr]?3Q\]&MLYYMZ23Q-
%0\.S1KBW1]eqtPSDit&qOJ-^)U&GoP9A5YS[2a)[T/Gj1CA[P\XjYq'Q>+[%;b>j'bR&^VnK2oFOVO/Z[IkB`-]%:3om5.\DmNS!
%[`bM,Is4*qok(hk`#U4lR%?lSs7lWMVLrbbr+a!sRgY(#naB(!EVj\=s3<5q.^ra`hrlf%Uj_\c;W=)C,MBCDrQfVKIR@a3L&C]A
%?i"Jtr:QP,pRd*i,n:SQn"iEdKF#mnrgK0p>$=^4EsDI7A)shpUcTY/pr@Y_;Q\9R]&sIa#JYleY@Kj:>.jI9@\\>04rCn6TA4J/
%[_1M;]oDqY.]p\p)X%-5^N_o=9hic%UtX7OW@PPOs"IEsUjlqJS>oGKUuiBEnG0t+naj%9dHiaFI.B:acDiAoC0oJYH(&Ptb<N$7
%q=fU.HfV`EC`)U/orO@kV(]olhs7T@/cTWX3.4j\g'?to@F%tLjB4L%Zn+d(//g7kPXsmB7E_Nm>V>?2U8>3,>Rm%E<ACVjSC/jP
%1+])k@OIjQGrlb.[EO96\13*(\1CZ8B*5%T1V+HZ:1<jXd%WaaFspd3@/jFLq9.]e5<,:V0;dLK@]`WVA'Ec90$WY/h+XR9;QQ%B
%;Hh2*:X+3T8VmQYK'[-blHKi%qQ2i#*6ec4i&BNWhW]Ocs'@'Pk]8UI-d4WDmFFS/"<WjZl5j3/9AjH;id>.&88.rq=25&._eIgk
%A.#OSG;d(tJg(bi=O.P!PcU2;I'u*Ebh#k"qZotaf.CQ1-rIsd%_Gg5c`1lN#A_O`&IcWiq6QWOr+A:kRuBG!C(+7#UQ+".*R;%S
%(B_)j6d;<-a\Zpm!HR"fs7l$l_b&bNI"L/M]rn)4eM(sO#'/*T?pF(8ZIMAPe.Gh"&[I^!(GYQPfL;H*f(t:P6$b+]2Gcn3.TR1X
%Qbi*-OM3#_GGl]&MTbRG4/+JY*DsWn;:C9#,KdC8l_#Kf<g2-D446^lLE/fbY^6Z:Us$!&_LHJr:AS!]']dj6aijfJ\o)!O(<ArA
%JGlDk.X$;l7C0Zu+_qrUL:X(7NZhB,HRVb-Ye(;lTVu<GTukBteQ#1_Ee0*]-n`[bmYL/$F@6jf6sU\9N^t+?#$S))fkqt%$9uT9
%l69K3_k3@b#HRHAe(!=];b5@Q,#`$:-KoE'@"6as(N=RU_;43>jsBVk0c(b^06u!!DRh+(j]mU8!I"J$Stlff:XX2X)D]oBV@Qr9
%%FLbe<7l*0'LKMkSW>OtE*TYccStdRB%BQ0C6F2(qROo66g%qp:RA4dZjkZJ4-sR(1U'ui%k(tiU3T3SIW/&F1mGPGU>%I6:Vs>[
%?=<:+'t\X0B[0RKT9=4T"')"h+rZ?^nq[+84t(hU(]*'OD5^"tfd`Z&g?UBq[Ne4@@5h%/4FFbMh-PO"?Y:*$FfUc7EpMn7%X)h<
%M^KKG/D:;Ea.:S#"(AGCX2bJ`CK>Z;T8fANl2iHHm;MP@%!tJK(/Ic3CF<n?D>m[8`>'Xp&Il]jq88cM(mId/i(dqqfh<gADBa_a
%.QO-g(*]fp-'KY16b&5K+Rl"7%HiAo2RAu3%H*Dk=kopc&=EUd6lf%2qi-Oq*:!qk8(*l7=---Zlj?"3*uXPn%""k7;27LgG'.=m
%\#+REkgi!f1_c;<%sL!S:cb,'4'Zs=2H+X4S`-qU`SR.RY*0:W,f)(n1>P-'Z[\@+Gd:B1`):@e:PKNs%Qh"W&0'\6M`[Im;kP]c
%eo^Gj$1\'j9lpA@"l5c:\-$SDAnXgC.Tgh%,!T,RHJDUm5qii&s+gJSG#8$<(AG/jE:&om8,0[\F>U`/aM+r!aLit<Y%F=$]+)iH
%)uOO,r]*N@WJbf_kL?8I]A1&\\0D`)_eFa0-PT-p5P$-Xpd#M_Z\:I<R44@fpSMZ?%p:&M>DPt87Jm*ehoZC#ho`dL,nF"r&m,hK
%oajY-!CRNr(c)aP'L=3&-3AcC8-Q$qp_,<0,![.M=lO!g6j8O7Gek%Z6"!<te;:,Sc218sjH4Ph60N.UY]D/nFokMOaH[%T#o#\(
%6i]uT#SJEbD$!/QJ,n*;9:?.aL&d?\0b[Cb'-po(6r4Ha&MIN9.U_k^QS'-a]L3fe^-ob0"F<Fc7g-7gO:(')!1!mg!?2WL&j\!L
%'nDNnM%YBg&7?)':*M/q;T-bA#RUV[iWVnA"`3&);C(g@?mP=4F!MSI&L\(h&ePrn5q3Ei!^Ir#"[#2G7g,g4Nqf@o??/Hl0a&oC
%MiEN"QjE4;,D(MtK6VqZ5s[3n>A4[p0Q7VLpj!GZE,_8Eqf*\J+9F%p71]Y85S;h9RL]<TEGCdFj!nd!#8%OR&P-Iu"@U$mTEt*1
%!ZM20&H36V&1E,7Hlj(I%gEdn%m:_\Yn2K!^sn.TKOCK=HjDun+N;!K5_EI<aFa2^+C5[Ki%"rO_i''O$3K2FAO$A%!UoLZ+G,2Q
%hRCoTnmLAto$HtMo\$gCKE,+^\3iMGYYY<]"R\X=@]VqI5-Rkfa@Q1/+(!ekTI9r-_[Ces$3J9,,s;A7!TNTX*eJuOhR>6]nmF^(
%o$C;VR.5]3"b\i<^]TH:_'./G:^$:t!UYC]BKuRKiLr:8<^HdE]L[gN+OD$5SjQ<c:^o)%+Xi-pa*3[dnmJ+1o!#G?EZ1#ZR%$@B
%#/W?]"Ci@;iP72OBjcGnM3&T18C-[,,.iEZ#Rk<i^^Vj7</-1^^g`75G`W@c(4_B_j>H#7!&inH-T9U=(`^%O5U%nA+i5.".\IU[
%W?FeeM1IAj/Ai7f0N#;tBrDT)MLYteJ7h+Zj=^Wo6hdBgJA8EM2+rT/&]*Nmf7O80bE.LJb9.i8^bY-QZ-,o+luaZq]<FJ=-:<kd
%OIOVX1r(HBbk`=b0!%j=`kX?G$a:<:*7A'm.7";+]Li/rfLGEpCb'cI_[s`nKHrBQ?mMu/ri&%Xfi@&6(kNSBKl-h,I7b@cqEc'?
%qSH4\!5:-tk7_VJ(11MKa`ies5g)1Q`3037";"]#D!0OKPOE2f!QZ&/"+-(0GmN,NEY+#1PN#))egD9B&B$=l+in2G8I-lU$YqDd
%XA8i&&B)X<D"F:e4bLRQ.)X>4R'bO.:kGB+%Y?PJ#GJ@c.Br>(1(*cc%"tXX!<Rg`f'bR\@=9n=a)kkE(18NV<`qsV=PX<L%sEO;
%B`&F@&B$=,*_;X5]E8pR5NT,&>o>-[Yc\f\Kl-h<h.eW7$>%j]MCb;0*;"d*(k?d;NPbcCXA92qb8cp^5ghs?3GHoZKk/d'3$MdZ
%184a3aKR83:=-+:)6s^;ZO5%`4$aa/A.Y7B`"L!,e=8c]@'TB'N^VNb+^m%P&S%T?c%!</%0eJZ$p-,)e^K%30\fI*AQV?Rod=Au
%J3\2+(&(MXQ,IcdpJ2I!_ZV+:/5!tI4t<j9(/oE^8I`4nQ@O7PRd6-J<p#'W>h<"DY,ruMf`HO"FMAY$.RG"n.O%NTL4^*U#%SNP
%PMjrCog+<G!uGYij;&Fi%Bp!eZ[QNX%b?CdSA)K=gAu,D>t'O=K&qOb9YjJ""nMbJ+L"tk6:?A?$P<_JCmR9ijtMTU?njPHg\dsr
%e6oKkb-82_3BCb5aFKD,L]V?3*,_uE88nRk,#*W5Jo%:bSq(D'cYT]!qN-D0!uGB-J;pd+AKd-(_055HNaSbt*uJ.Q!:56TRL)go
%<=qb)/@N`>*uJ.Q!9SgNfI1S-TC,U0_)Nj\c8alu#B4V_[`^56%EH=&X?S#`p+6="kdJuP2%>'=+L'?)a";>Y"s<p!!dd3,a\%XV
%pi&1+@3-ClYW`)d!K6d![e3R!&r6W@[L8Q.*>@E@=H&6V2ZN%01DhZq1A!,M"DJ'=!pkL*f"&*lElY9M2$mXq3M$k#Khu/o>flEX
%Q@loG/O4R`ZX>Fa!GGm.J@M,#]g2X'0>K4`Tk4;E5VY!&J:ps#:#IE$EWHK/.EKe!h/NW$>>U%p>EC-6/l2bl`=#esi*_-HDOKG-
%L<IZZ)[$r_+ssXa"T&9pc^%rpTT-/p+j1>hPEhBpri)PQQp>`C'pQ9VVIR,cAl1T_!4'k,<rTYT1)P[r1=Uu/N"H6e?=_LVXY45/
%+ikKun4;4P_1.=s"[RrI";uh!U(j*XO"/5Hfs7=//ICP@\?R"Sp#$/u"[jW_]1LXs"\OF_0U0ARb(UTn$J7IWru^ZCl<nQ=lB$&p
%1'SP*J.TeP:lmEDJ4'B8O>4J"7"A3t0u8B.ciAQO62"+`oIX[V-fD(B:k=+<5mEC%Cc->3k8opT<5?"qm(jQ%$J<"0,oY:L+<&a<
%-Q6NS1rpG&@"0>0DF)9=K.(<pK#rM"Ym*LMf``7G%AFQ+jGu4?*k$X.Ao$iDALYI@!:^8SJo'lrfUY_^*(0r=1%;bOL!C)@Y^,-K
%3N.SH3N0j@3QN%ZO;V>3g0_pgArnb4+A+M<`FSo]_[_80'+H_:*CM>7aWGc#>Bn`-)t\OZ?,.,=Tgo?]#EJrG)X(HLeqP@?JY<-7
%)gL10Jk,)U#j,Rms)_lm%/N71G5=MEpk&u?";u.g1+"-*#bVY_L*2Q`cjhhn+HQjIi/^4GR"^V&Q,$==rDF+%V7$YK%l,IUO9hKi
%157!7#TE2\>_G-T>_G0!>_J'P#h^C7ln;n&5KF\$&;6K0LY+i0E.f?%#_\0,#XO9knHU=M;n$?K:^TT8n2+-)F$N8_<59IVIIAq\
%3C%ko!_+>D%k8_P#j,Rms)^IE$sGt<G$75P\:e[#CEj"i+:^i](mkkf()F`9Lli!0Lqj966PG%_S)]Q(a<#5NDSr_KN\e&'WalW$
%+Y%0&eai+"Hftc5!<Wt?#G;VC"S9?mThkuHThpN8To^us+Tn6##.0&B3=7$`,R$XdO9dNR18ZL^#TDV3<6-,T_V*g9=`J+Ap-9@e
%!oJIi3/GXUL^FuiO?I92W$%K%X`T7X(j(Hmlu[r5kR-!0*"pU#P/0P=rAe)V=[uCK'`emS/:o:(N$&KZJi5$kP_GX8VZ=7,ikc.P
%:BGi[J@#m+#cF=3*`r[]fRX'46r`[G6$,,t(`S0FrmSPp0TZZbfT?OF,8]^T)"oj&eS..9X,mMK6BGAeKg-k,#SCCZ5G:KU%%3mc
%UDG[t04[=6a8iN-0n+[AJ?t=lJUp2h[?*+rJOIk8n)H+O_;I#sU#n$Cb[Dn*H;H;0TjSAJ,DE(MJiO6*Le.sXEu:VcS)hn(-lrjc
%_4Ulhem:`64BrB6UOY$+`PZ,?$5g,-<TS6<*X-B:[rN>>?uQt:OE26GjtIL"5pu`A:b[ZU6iaYl0Sb3I!4G]XLOhk?!.PJGnSf<P
%"s%r72J0ci\f?Gp!FZb$LVjZ<0P7#'3"1iL2Xaj1$uI[X$uOWW$jC\h$A'<59Nij3_[rXM[88Q4+UBf:TjS?tP[]jS3=NmE@42t7
%i/((11I)GfUOY$+`PZ,?$5g,-Fe];7)(8na^6QU_#(sh?L7Q4Y0Sc>EkX!%\Kn;;n;2S0X"`kN4&<dk:jtK1P2T_T/:co_PJjBX5
%W!kgMaC0<-&8%V\3"/Xb@hu^p,f(^J'a4-BQ,CrQK>Z&jS\n8XLS4\V634<EJiO5bK(#GL*!R#VfL!Co"qj3(r&G/hEu58"+F$M]
%?`IPLe.r);6GXWG&cpWO_&NXl5m+i^_pAU?_pF.._b`%BTcihj6)]Kh3=J30:^[GJ(kN<m((01X"<f\DT>OJf*/9&2#G.e"B+E!k
%L^G!*:co_PW.6T1`PZ,?$A*Q\b$et9_-q#pc=&,g_b^p>THM`N_&S1P7&Yfk3=J30:^[GJ(kN<gj3M-^*Y(QRTEA!=50-Va*/:DB
%0akt<@>G7-ZVWb(L8Z5^pT5Ei2AdEg2XDE<JiO5C?k<Zq/JQE;+;',U'[0u.&V)GIb[DV+1r,a$:co_PJjBVF@hsrW_[mP:AtaH/
%$rI%8(5dmb&/>?>^6QU_#(sh?L7Q4Y&Vm&&"p33g$KNnF"Mto]i\7SB_A3L<0X(i:T_`[GMTB3S#^P?T'$t\%*/5S*TS4S1(kNTU
%(4:K@>u!#l7XZY>Ta_3]Taa)=TjeL!_;GD>/JNcR&>TT>&<I2aLfb&a#pm`*a;ia&_b`%BT`>Kf!O.903=I0b0>bLE"qgsh6GXWG
%&jZW6O2K<KK>Z&jR_qrVLS5pU6,fXRME)*+'VZ?mjtHo]-7r3@@>IftP!=_qH8l<JK+?[=HO[scE&e>f!l?Kf%u2;X@*F4(Q-3T\
%'X2l?b$jLd_-uOpc=*Z=_b^@<T`Wk5`>f'p_:q(+LOhhn[SS]6JOIibIh"j=E#:&/*I)lgB#-^C*/6ra@2>ku_[mP:AtaN1%$(HJ
%moqd\I5!VhIFpOg'lt3AJf[lb>,[h+&>]Z?:bd_K#Vg%e@Lbbi@[$^M%+W7(W#0X7M+Y!.5Rt],J1qA]_dS?.(pi.CUC*P0-t)Y\
%Q,CrRK>Z&kS\n8YLS5pU6,fXRME))BMGOZqEu9K?P85Y10LR?Jae-II4WK365mO![$p?Ym@<`LU2'<qM6WCjg"g8k:n46gg_7X^J
%0_E3>0_Af:0N?8)VuVHH!GnH=%KhOfCnY;J",R"oTjeK6M4anK*/9>2$l*.]4=/T4eZ`CqMr4a^R);05!*cCh_a#DZ_"VgcqI"7Z
%qN,b8.crEa"?rai[88T5+UAZpTjeL!&0fUj`>jUT`9-i9(oiA/:bh1Ldo>;M!BCQc6+Ahk_dS?.(pd%%*/:C7R.m^&L-?FoL-FrD
%L5Iu"'nHlF67l0\@0f2Q>,[h+&;1=s:bd_K#dHDh*/<b;0N8HAn20Nb/ChXHL^G!*:d#eQW.6T1e\bgO$A*Q\b$jLd_-uQFc=*Z=
%_b^@<T`Wk5`>f'p!SB`X*!R#VfL!Os"qj3(r&G29_dTJ\FAO](TmA[,;#t/BWe\J''ej6nH8l=15qqb33=L<i3"15f3=H@:(b/u;
%+Dmf=%Kf?HCnW$_",e:<TcssKMkCNJ08H6Y*/9?4#JMPd4ZC/b#\!p?W$7!?L_4=:`s:#RjC2rTGB+Ps?uQtZY]CX"jtKaC4s89?
%'fZUfMGOZ]R1P%-[G[ZRU0NGsdJQ!5'lt3A^`ZSV>H!q,5U$24W0kIf+okiGR);05BYa@^)#@WZ)#@'M(`MNj1^#sTR'b3oLZ+@^
%e3_%mL*4F1Kn_Sr;2S*=k:e_'LS8/'JK&C.Tm.V2LZ))qR"a\]0LQ)'=n&G33=LrM2Xaj1$tCtN$tI@=$k77p)SdIP!*a-(_a#CG
%>A0DA5U$24BUH\&,%uKkLS8uQ$k7h!4?XXii#c57_kV`9$dHRtL^G!*co`;&7ff+RXW3'M(`\8bll:b73=H?_%iQcH1sBBa;M84e
%R)9JgR'b3oLET9p8cB]ak2A!N$p*lG-.j(XLZ))qR"a\]0LQ)'=n'""L!C)@Y^,-K@2OX5@2Qo-@;)%Gck,iB@F@K[*/5k1W.fsd
%$pf\@$Oq.oU(j*XcXCK.%R\.,"&DmN*Za;q4:2A#co`;&W.6T1?8n&*Oh(mOH/HbQ(k]Y5(rOX-BUH]a!!]+tfL!Iq"qgsh6GjcI
%&cpWO_]/jn5m.$F$k77p)SdJ?9!2O$@DC;-!SB`V*!R#VfL!Iq"qj3(^5p/c#(sfIL7H0.0Sc>Fn3KF?Kn_Sr6&8>F%<EA<&>9jX
%jtHo]2TMH-co`;&L-Z'9V@$rGaC0l3(phRO*/:DB0al7D@>G8BH/HbQ(k]Y5(rOX-BUH]a&GVnAe3_%mL*/m_Kn_Sr6&8>F%<EA<
%&=__+@;$\l6c5Q!:X_MKdQAM(W.6T1c,3tG$5g+r4<0*S+IMo**/60b*/637*/92.$k6SU)LsCrb[DV+J1WV%@3?/4/Mt[[+;$HG
%T>T#<*/926#7Y/YRYScl'ej6nGrQ40!Fln6LVjZ<"S9?m__;:I__?h9_pB!NTcjUAdM<b^0X(\s()l0dYR&)])WEHT#hksKEYt7d
%@;#pli-Q*`Es!D:+@`#X-?9rT(kEHMHk9RY0#gA/-\l+=#)?Uq4,9M>%R\.l"!T<RJ\r%p#dk5*#sjAL$iUGYb%8X6h4MU30Sc>&
%$pk'#Kn_Sr,Qb3(L,fYf!jIB53=I0b#(.MJ@13?q@15#KTjnR"8'lmK8IHP[(`k+o/Tf3F#XV3gka97!V:[&C%R]u0(chjA\?Y`G
%MW`r=(`ij6=m-n:6WCjg"g9DB_sf'^o=gL-0F*6J0Sc19cnU<L!t7L$Y_A)t$mYnYKoS/%,Qb3(N]@LnJd2!k(qPL?cnXb"e$Cb:
%rmBg]4:2A#coiA'W.6T1h8<ZG'X2l?b$gZi_-r_Kc=,q(_pB"fTOZD:`uKg^7Atp#3=J308IHP[(nq_6jNh8u*Y(QXTE@thJt2p_
%(`ij6=m-n:6WCjg"g8kFkfc9mS+j$)L,g(jL,nT?L5n8&*C12s-7s>`@>Ig7>3M?k&;6FXcnU;!9!Lte*/<n?0Q[^an3gjOd6S8[
%UOY$+h8<ZW$5g,-FX%26WN.//pT5Ei3>``j3U@`?N]@Lg?k>AL/Tf3F+;',UFNe/9&V)HTb[DV+1r,a$cnU<L!t9dZjSG\kp.K67
%J1Yle@3?/4/Tf3F+;$Hgq`#"*0K9J^a>jYLEu6q>+*<0>ka97!KF#!40o$nX&Se"L%RUe:F8S$,h8<[b(j+\MWc7*N*/:DB0algT
%@>G7-Zd:iTL8Z5^pT5Ei3>``j3U@`?N]@LgJIae./Tf3F#XX2Jka97!KF#!40o$nXYrVe'L@4"SF::5"2!ooHh8<ZW$5g+r4WK3T
%J2%Gf_dS?.JpH7r@@2\`@@4sX@Ha)rciF?E"5#r\*!R#VfL!Uu"qgsh6H:&M&jZWt3=O`]@H\PMcnT.+HT2F2!FlnVLVjZ<0P7#*
%3"/YM0^i4+%!+*^%!1&]$j1Jd3as3SD4s<,"%sbQTd($LM]ci0,7Xg6TFHW/LS9VGL5q?#^*`qE2o&i-@K]lu,)7=t&ST#$#LVYo
%@VjP<EZ!qHE#@`AEu5,D0Q[^e+OWRm3"/*1:^[;l&;5kIi1Ei?>_^HWr&G0+Eu6sR+ERTfka97Q+okj2R);05!*eZS_a#DZ_"Vgc
%k$W-Fk"p+9#3ITJ"?dThZnO1hiK6IV_S@.G+N1(0JN4-9MG<[)0FSJI@:7H5)f)XNGTJJmiDDk-L#LuE6j8NPn>^Lh%$(HJmoqf2
%lsOcLfcfN4%*W,s!.us*Cgg]]",R"o@:0QIM#_@#?k*9qTE5$3L>h)F$k,2doPDa'Irm[ZNrm0L$kJ+:.U^K;n8K3c"`3&)EZ!KG
%i%VISc=%QW__;Yo?sqF"^`8(W7Atok3=J308IGWA(nq_6jNh6O*Y-*'TE@thJt2p_(`ij6=Vr1i6WCjg"g8kFkfc9mS+j$)7WpIF
%N9mci(^B+V$j8^1R'\P$LET8%C11K[6P*_T_S@.G.)dP/Eu9Xe__<e.^_<!,7gD$_Nrm0L$kJ+:.U^JPf8V&#Uoo;WhR@MBftlT#
%ZGXsr(mr2p!!Zj3fYYED"qgsh_S@,q&cpY%^`3Ok5m.$F$j1Pf#/D@+9!2O$@DC;-!SG9)*!R#VfYYED"qj3(^5p1Q%L.]N*HDY-
%^`8)[^]st8('`nT"<g)`%*W,c6A/MZR)9JgfGoAN_shU^"pQ)mROXgf+GV*i@*HLWE#>;N`[hN/LES,Qk'\b8OW=i?,<P63L4M>n
%"+^se67iVi@0f2Q=r<XE&;1=s0JJ8*#dHDh*/<G20FS@Nn20Nb/AoA6L^G!*0K^>0W.6T1_o#o=$A*Q\b$efcK>Yb?4,76P%`88`
%KE5Hg"*5;M"CMT>Eu7FN?jd'X(e=c=nE2J6%u4S$d)!MbL#LuE6j8NP(`j/S<5=lTiScIY"i7iijY3um_-pl0S\m,nLLD;0!n%hg
%j=me@_A3@80X(i"('`bPYR&rjqJmF-aC,nkH/O#^cuT:/L*/sYKctIRJf'%SI!cK2:+jOUI4'f4*=NE&47!rAM)btHK+EdF0E_kQ
%O<W1@5UHUW@P.@&PUMkAF%h&n_n[7H!AFc]^_R.:0TZRU('`nTO9iW;#3IV$#TE2\*(G**3/m3#Eu67d0MDU4R$b670o+_M6I`lj
%*/5TSUkOXc$rMmVo&h]#%u4S&d"*-OYG$1^/r/C_5a[8ii@mY'N*5YME]FPh!]KLO3K2a$E#?,/k:fTR@@.%I0EGuu@L`Ks!,Q(Q
%%KhOfCggc_",WZOrZ$[Wi@mq63q2cXb^t=d3=LrM_CS@kLES-Tbej!k(`iishR@MB\\[2XEl612R$bcF&bKI?d_`pBL+#KhKo%eu
%6&8)?'6>"b'V"10@@/)G_o/2M:K2q:!HK"u"b^$G*Y(P:^mG;/)cc+G5QRAKXW0fJ0K>$HY]CX.jtKI34d_VD0JS>+8eGfH@Lba:
%@a`-3*/5l\-M_^"VME&C1$HCdQ(^\Q3=LrM_CS@kLES-Tb_"H+,^?,fJmdHEEYu@'i%T2hc=**-__;)q@05)u`#Jso!SG9-*!R#V
%fYYQH"qj3(r&G0!Eu67>+F$M]?`IPLe.r);_SdDu&cpY%`#Jso5m+i^_oN8kLQNNr%`?4)L5E\N';60gjtHo]67kmT@0f2Q>*t\p
%&;8[UIh'BgE#9o+*I+#&S2h^I+Y$mD_XqdaU&r=c9Fln%.L>0b.u06+$k=L@ll:b:3=HRP%jjUp9[$oN6A/O0R)9Jg#dl?@LEQr.
%3W:"Ql/=<i$p*l7m=Qt=_dS?.(pbnZ*/:DB0alIJ@>G8BH/HbQj9C7Sa:14d@:B_a";ldu?jdWh(e=d;$PRRu8-E<.'6>!]":ak`
%0ME"4@:IU"`0c8Ci@mY'N*2Mh%RX42R"ae`0LQ)\]PlmcEeD2:jG'5Ca<D,36js3o/PO5o?jVK<9Z1@I&VM`0`*m$cZm"bY@@/6o
%@3Xc`mn#dj%<*/9(kEI"aC,?`"Bt<b6$,,t(`W.=*(Fg"3/lXsEu8'(@@.mZ5bs)_E#=0@Tb[\b+UAZq_*=V]\I=mip#e#&b[Hk=
%K.m=B@:B]KM#_@#@L`Ks!,Q(Q%KhQ\!T1q+j9C7Sa:1"^0e_^gkE]]&R1K$JRjZ:4/GihZL*mkaLDQfoK\"JjW!kn$*DIfD^sB<D
%OJX;#l'UJa$2T\R]tHCW7F8+fF7S#@4EiQgV[JlqTOK:2[<BN['"CR[*u2]ibGd,KXb=5m'sF=0/:Y1E&K:qK_b"p:`IQ6@DHJri
%aYrG>enX>`m"g&7fuI'84-J:^#;dVU[i:<;j&#Y0hd5rtZi&&#rk4`=l&0SCIK-4WZY?rj\ZYGWi;__lBD9+'Z_TBN^k%"Z$"Rol
%d^0+9D;+e.s$#nN]m&"1CL<9aFGh'F8o'd=3j3:@8YtV8FT4@WfBkpF^RD>2I^\:);?YB-./\6dieR"L^\2M:HQ;a=P0:$b,D_pE
%r"Ld*7d7NI*lKf.NTJ@HT8i&oD8muiX&'Mfs%Lh7o)<"+r<rLY@b'3e;Vd,Qk:Anr=URY1oK1n<&5hNK-XHYDruB!%F*`\"FSXXO
%=QeQco<3P4"WOpuQ_e%:`*]KM-f?^t4_DMj]tg0;@)g4%2O6!8B5G`DcA7<@'[OA+pGl.:CNC_*GAC<j5kL1:<uIbFFGGZrJSs(+
%a(,daT[+USoCg?pp^42^k*nHhcQ8L3hr(4hPtKj%9(Pb[4,!-`P5*#/8=<h0_P]pr1<SM9n\gF'DCf.<8_cI=jGlh8p@3HVc6[TZ
%@U#?34FA8gof'f4GHC\?=\bE-c2\`gIQJ#SrC`jE-_9Xuq]*Q7nfYabqjatWC>d/0YsF@;*;T0+4T'.IEUt.*J\>FI*HtnjjR`E'
%[M=;,eK]s$67ti!q7Aa1`%d@8jibJ+4Ni[Lg^@JDmIt<fM;.#UfHZ4@s6MFs=SG\!E)8I,+RAUc0ok+%USB3-c(XkO_u7/g\Rkd\
%h0$!9Auq$l3:_2QVElr4')0+[5h8l#>C+CQ@l;Buf3<Z?Au?JT8M\HGjma1J6&`JVm0iM0;dP&nKbmu&i:*5$c,\2F["]#4&:Lo:
%E4NLI]Z:^p]r?m,k=s!-&Zq_P*4bJ-B@?Pi??'s%/"1J5bPt]PI]epFj..e4p[rD7m8?M[d>U<AlDlW6(ZUZhPeYE%OW/on=hYT1
%gbn31b'NWqb'V;$92K!I=<i#iL/Gn#O.,0aF47ShZ:^I%?^6K)-QbM9C_"/A(p7m,]DCo)]s3Luf"4]T5SW$*7UGLn?*kR/p_22i
%A,I!WHH[,mA66:)I5##<+=,-sMt8gf*T"m_nQt7]db!q4>OPDij+^MT/F,o<s5<G"ji^^H,?P<p>#fSHQG;t:^oti;b?Sn(`NK=&
%.b66ml#m[Ibjf`%KX5Q#RrD9IqhDRt`FZPd2:<L"'W=Cq$BHQP%*W8XE_GDhN82Ia;W^1Co<g`UWs$MaG&4Eh`stWp(AmgAM^U4.
%#BJ[tU.ale,bY=IQh0mTDgK%hZ0q"&boagu@>j<JJ#F(6_IW&i<_Tr#(JJ!uHi3#UT.M+i[6G6>,_,_,*Y6m?'[$".`;t<[\QJD_
%VsKSND=NP([69(I4D@j#oW1W<+6"n4#;qerak%8#R,2+5+BO@hq@_],iO\?a>O=C/I*uX1olF9EXtOTrnsrI5X%`P?D>O!1^2_eE
%KSH,Egc>duo(g%s^B&dXO>sk2Bb-'&Bb+g4lk8Xm[G&[30&M]N8<Nu<'&X-DEmW'>NdNe$?J[-.&E1,Skp6Mi4WlA$%@EIt#f2cL
%0<%ctoE?9Heehf:kFZ4$`li6+)WG>Q7SkPL-%M?'2I[T=j`a_0n0k<@>Cq$TWj]M''KO%A]O+pa$*fb`/h-;XJSY'?!2)smK[n4)
%QW0nJq>u^JD@FhO*P':+0"^La0UFXY/#B>5Y["4*?2[OWBI&qC_J'=r-)qdagF7<"B4o8^OO4\i$RPPW_"Q%HQT!I9+%=O.eAsp7
%pNW:LTLdpbR[`*<"hV4uD,"AH-8\B*/J;onfR8Kk\$^+<&Bb\s$RPEFp/5]4f<ROKJeA\HZW^8b2HQDB#h79(@B_Ma,o,F#^VJmo
%)?UFoVe^<FbLZ\3Uh.dT5q.F4N0``eBGuKaC[JC:.&uc<JnKq_^;+gt*MHWEVZBR[?"GW]$Jb0+2baEd8\qFB<G&PD6lbc!GW^.Z
%THN^U:!R;"oA#HZCGtBJM(9aT<4>0":cLAE`bM6p<WZcfb-&O#$6=\"[\r(Y_H:@V9+'JD7YsA59+"_=X"o7&-/t$$_W.=/!sX%+
%DK5g%*YB,j%LM?U&1c_C8@64=oS^IZ?_N-tQ(V2,Ta.fg!_1h-G7'^/LoS[(8V,XOnOejm.k+R8VTQQ:QA@p-$BGF.$l\1IYfV/@
%H[=Id.r.&98SKZJX]2bq'/Yu^)Jd<dOAl9bM9<!:EXLXFGF]4%+[m]1'h[m*P0LJ+mAUm'<'jZKL`X@gj(TEaoQ[9JDS"!ZSo=fj
%MFm"\Aue>-YnHDf[14+49k8:%Yq">G:3W-CliF)k5/Aa(09pc3QHa#/V6#M-Pn^<O8gTcq$J67WIlq(JJ0+0,:!QYee(deMCHBLh
%\.k-+./>i=RuO0E!Dk5"W'J.Z#$36J"AjBAi00Og9(Wh@[TFA[Pg)^r/8K@79#.An:.^!RA*6Y.BcD]`GfON=Elq1)"/iffR&!,=
%-*0Zg?Ekp9B:2LhZ)C'T*a<bALYd+;3\KN2A!;_';HAZClh5qtMnb!6<"))B-cIiD6(a2cC`JgPAkoB*Hr`@bXc</c[/S::?UK5F
%U8dUbY?S*S=Dc4t#5dgi/$3_3DMNJa+me7#$]'Z,lnFZh#9JF5d^fa^7&op<#?>-!J0K!r[q*TH8L61Ro^ST5JRE;X;c!(WT><Y?
%7\E1CrQk@h](&Vh.ptrCetE^A;f)[(7*<(`,uridhi>br=m77Z7n>UB&&6i0OY'a4@?3seIe!@2.q;:!DF?lAcpT@O+fCCaBFONB
%RiZ.@YN?:UWAZfW`"5k\?g'H#.+Y()KMlXi]gU#S@Aiticuq\*a@Ncg3@[!g)D:Ysa/nl;_0HO(/oBoDUPmI,V9cU++W[;aWUfqj
%8_Y*S`&9]H<*psmCW*X>n!!V%W?cbW<,:%3;(q/!<icc)h=\YAC@.A(g0!+o+SM5ZMW=aTUtQ<qB3c)K=^QacZ#$l"r]bm#O%??j
%NaH/\&"qR;k[]PJ4s$.IfS=<ijJ`&7<<,Os&Qk+.&F(bI5pY$D&gU=k"D(!DkI^qglJ6GA+D^29)jDls>#a7-mCX5f3n(EP!r]?>
%%_$mSJj^3-*u,Mog7^\c:*^S8MC^t5V_P-)D0hGFrpE%&Mk((=aD7?6+X41OPQaPV#$3u3]V#&p0(jGQg>Q.$(Yt[9$'Cq8%NOYQ
%O9;Pi*<Pi:C^)g8n3@>CpgFh:44Hd?KVX3)OlaX$1^:e#9ofRncZ0,@C;\VBJc?<?W%3"D/9*DqW1^lZIbUpSet3st#6CNJB"&u#
%5nqD_I6B(rfBc&_-'/V[Ao$iO?:Y'Yp`]9*L4Aj*bn8WW4>^Pu$JY4*:]2`4J:?j/E?),iTLX5K''i).S>U60l%?j!A!d%E,40?N
%To3eaK!aO>Rt3HjlX9[gWuo%`k,:]_n(co^8Zh\R?^LDM*QJ+2^(8AmNI`!aZ_KX+K@7eDj(8kO@>5#`3^=\4WS7Xd\Ic1QHIQ:.
%DQC:**6UR\\^D5VNpP9\.t.j9J=1gsSqb0u.o;bi!)eTj%t<Q$69;^u1p!@nV_bZ?_%UY6j#QRlgu+^VE&=KQ2Zi+u_8`!`*3_+n
%GLgC`<jtGGf\J`mH]X1/Lh#OA]>T>iHD(4E:klp"C?C=HSNBSM"DIE:^U6V[RmW4gN0)6'6S\iYYY>YafI7?l``aCm@@AP'2PesM
%NmlXjhg9</fJ`/=dNMUZ45a)EeF4AlfqfH(H07shWG]H(eqKELWBk&aJXSq9A028P*m`(jKYYe[c!#VsYe`0Q1n81Bi(P.V*N0"X
%H5JdYgNSmU"DA7N2'gT4GAE;(f\IF7ki<CBrPoSefd+p6$bX)9SdF!h[n-`+e\#dFT98?Z*SGp)<au+3qrH[pS`PU_GVb/Bq@B4q
%>CZ(m=!D3Ho^U?I)nTt?0Oe=!b[qRo7oV@r/Z6*%MA,sdqWn)@"iPCEk9TpJmJ_gL^q7A@frKOR:?A8Q@W,SN]ZWk<jGrRk*k*ln
%K7/&0a3J`NFM&K)bj3:#rRB`NmDoZL5$f.bA'MDhgq()N:C2AL+a$mt6YJE4Xmg.3Ho;+>LS5`Ogu/=h2k+1.gg9j4%L65"?j10&
%mfW+HA+0d$lk#5Kj+d)KZ`_NdhBU<*Q$[A;n+_"@LWFN.m8srI$)jCpGTN+-e'V9T$Xu95Vh$utp8fos3f6i[(:_U(-P,9b;Sds'
%-@2fbjs&4'*SZ'+<F]DCqt-,6S`e#gGgctg=2C7#>jjL,UkLZJ/e.$LB#$U1)Uf@*L%f#<r1M^W25G\K:Zm1_lrh(hrc!Gch=.iY
%nK03)^$p/4pFWR!@TgCLq8\+G#-tI/ci;XCD?Q%[S\B@ipd1Ua4P"HfepOtY'SqaOU7,1uT.;r0$,e$u6)uGHa9270:'@[WVZ!1F
%@"Po(m;A-k!/%**1Ipp9U<hR@IR+RhlAa%Q*j[RDLOFJ(aNej:K=k@U%-kNZd4aVS't>:rI$cJ`_QEo+,QS7Z$7(9;Ho`0=TgDd.
%3X%+R4OCZF2PB"2\\N(MGTDRdO;,VGU%NlL=c?ZZ`3O]!o8eZA$nc"]SfG'-gt3cg3k+_7n?kEU8o=3^k//Jn+_q6H,bf9Fd8:`)
%(<I"h9eflJma5/]@"q^UM,85BOCc.W1o]>PY5M\6s!]Q\e-^D\hhN^C`aC(cft!ie)oAlCE6i<N\+Q![J8+$I'd"aI&:*T7iR^JI
%OR'_K_MBMF!=n_lHKU7":QS%6'<SlRgYn,3aC[2`,&[O%,R'g2qKmq!(Vb*K6nq-%+&CB'5fGoMF_%D\EC\kjm:#D6!/.N-qA]`g
%GDs5DH-e=##otg*#sU`W4r!sk"<iI5SUs4d-W5-+6mAmP$[b\hq5eY[U.!)m/?8EV$GU2/7('t)+-4bcCrJS$P8'oXW2+,(,]V`6
%-6>I/7.n8h+%7#U&@8l`rMAWEFRao^AlIbNkH#7fdC/@",`u-(PXr0!0A+#692t-Z>qS=r.j*#1TYnf+2%E_C1U"1=Pt4"\ok&V=
%\KR6V^_08j`MfTb^7u+5:*j`c/<N=)\i0mim-_YeFE/YjrS-'!&hQ:AJL)o;m`m&2lOGJB!hXYqDkk76'I8%ds7'KVJP[>M'2*M7
%)mSJKJ:k;L-3n1"QrmhFLJ&a]h@*d`<C;qD/+Z@WWh\u@Kai$ukiYa-2PuVFKI^bfGE939\c7[?V#nZ!5%go7>rY"_,^\VPnZ\!=
%=rc#_8p6dFYN3r_#8ra?(_-X@/Gal',fuNk_74WQR&#^m,n\fBqFtr[4<561%6Ki^0sF'/4'Z1jB(JZbg^?gDE3rW*<a[uf5/bl(
%#$Z)k:+Y'YDT%\sD:KHE,\E?=nkl\4I66#M8]#Z_0sj=](dN!g1'fK-T"oq9As0S*/STdj>]Bs6BIOZMPk=d^p<TOR5)03Ia8R/V
%eeg*[0g2pTkIFG_h@*$?AS?_V2N05mki657E?],LP,^nsD2^''8;>K.$6*GI^*h:#pCGd*d3%g-;J\o4h!^!l7YiWf_><`pqHk_'
%92_GVf`0u?)[!'!VC._s4?%<&S&#FLSeTN\UJ!07GZcF/)dQ5sOm&U#d3TCH%XLiH6ZgHE"<Op)RC"8^8IO>A7Ss/-8IF<GWZU;O
%VZ\YEJ_FW6O%4$qd,LFa?F'1XkTt-c5D576o1LM-86PdX?3?Qc!_R0:J;GO*JDO22&7CAj^*^>2qi2<)U]kXWa%JGrR&"+)7-WPk
%PB]k1"_s+s596kI$jPaZSmeqrg__AV"uZ&,g83gk?<-=O#=T^fc7+#h+=7\W;q`'t&s;ORf+bWXD^Z&>g@1(m$o*n*rZKO76g8t3
%_FfbATgT+#gZ'.iK=X$SkEt9&#_uae7#!3PO[C6)8Noi%bE-K)THVrUUm3ie<>%me""`SgpC8s(T.:[7OAspJA.mQh/gjC9#Vnuf
%b-9=UQ[*g?g1BeC[NA;q(a-gQ4j.B6\Znib1opt]-)-emL_88t%pH\$Ti4T'^J,";pft1jEeHDNFP>b5$@/IBE@-fbl-FW$T79U=
%XD"t>4KGbPL&t(#X"1XWG`]q<095:RVE!s/1dsLa+bQ*[-@*P8GE*IhGp$Q=ZcLA=Q<q&=1:naZ3GT(<MKZ\%gQ5Um"DM>m]"MMK
%i\+`I'7idX23GsDd,a5t)@+!DR;1ICRNrrLHF#fSg_!h$WX1!;@d$^+hbf,+8!eCrRReV)h&BlPG'Br83]T+*1UOM:W_!T2Hi0t5
%]C&Ws.UZp=;,'rMm#h=gK/EjHEDB7dfi`2lP;e+;g)4.)Wej.d0#9,b1T2X#$!c2PC(aAaFh]AA82Wh#J+0g$['V3\8IN2C5?A3l
%SSCb#$nWd*8ICVDo)Ese`h5'3l)?!kc])]1An-W6>[j^i73=5"/U;Ch(q6X\\?n'B,U,<:^F=&SVrQdC@7QZ-VOC%rLC7qUCjp)^
%H\'9ZNjd*X$;ALtLMAlj?n]gYW?s^INGA$]XT9ZX`)ICB5"b*4ZZ!l.1eE3Mm7]C"":!4WM@<BW^*g.YSY;lC;,(6P2HQD7OD7Ak
%$nWd*8IErgqgU_2@t5?XoMh$Fk=.=S1E[kGQ^DMsdDsFNi^D4n-<1@Wg6l[gOURr<'K2bUHr"-;4$uYfU7/I)rGHjuKN+-LC]Z17
%W_!QI*rCFLCh'+RkO_`;S``I"Gr%,u#+(]l@aW6>6D<&qHE)f)0'u=iM+Dg:CPj$.9ti!ZTq.mR4]+pWi-%&:!`2ThYR.\$W$Wri
%HgLdsW0K*aMfX3Eaj+t&R_3?2&Y_ol250(UAa("VNG9XDd&!;4-Bc.EH:uXPW[U")RbZ38d[mBa/T@1@?IC"I,R'Z&98RDH!k$)J
%+-4ti7)h5MeR[jR;,,mUN/5:rVOCWZn`&Ji[t8?-OhdfaW?r5!%XLiH>PX$%TV<IRV4FS4P2%/?R;XJoGX?M/W@!kN!-iiQ6Y#U%
%kNl/Hg`GGD$^umu-)-i!nmUP9P.(o>Jk\XTBd]p;-1h3Ro>5jPR_6r]M]24\E(W!ECaPJ^V[oSlUgR\K8Z=&&`>@3V4B5n,)!CNj
%PF^i*20m[7,(Q#9C'#PJ@,!eWq8.dp0C;.bT`C^CQ;Wa)C5Pc5gdWHqZn'ZPZ7Z#8[cI&+.>noMH=C\^W@!q](#+1"87U!_kO__P
%SG&VEU)j/n?qUhKZ0\#%>`(eb5\?.`V-OS41:naZ3GXUhMKZ\%gZd>NKPFuD]"MMKi\07LO3hMQWej.;JL2JbeN!';bZ*&"f-Kl'
%eXQ4\k(2_/;b\ZC(IONuqi3Fr3kBDeeO1#fkh[FDZ+Eq/dE/YeK;#+d;,(6Ph&TZ+f:?YK"Ult/W_!P\4nAVtYf6Ypb2cNcS`N<u
%Gr$;3K>Ak2RTT4@'&8X/K5+;L^nl[_-5"d*pRB$S<)`G\#>YRl91P_F[(s<NF/AB`WMWY1cr-U,U`e>8s,VqP$lYm7:GpgNDH)fY
%)ahR%&lVLUqLAliad[(^\94(PV1Y`o&_Rcm9lV[G*>b=W41]MfeO5Q^>[[G@o1PS.$V]u-ZrN,e?on9N<)XZe]dU3c9m2O9e`9G/
%"%IBhW@!jWPgkt1hi:-=OoScKQtdfO%%t'D)5N^K:LHNp6VBqDR^BkIXuM%VeW^CX>"VbX'W=1gs*1ih!%l@c<0Nm97Q#HI+<h#V
%Qtg*Xa3/M_7+/"\<=)nkQtd7r%&)Di2Pcdh:LHNp6VBqDR^Bm/DKp)Q<0J$_!\G^u8IErgqgUYCf,1GTR@\0!oA$8kD[&\Li"As_
%/GaTo-kmV+:Gn9MV1Y`o&]kN/9i49XanGorF>1(D,cXEDh!RX/!3/TtG(GqleKb<5O8V9a[5$$d1-O/ukIFGahDD/:d3YZY;"BaS
%oS^@O23A%*d_Slr8RMP3V._%&'V0VGmU0_m85tcg\BQ$Il&]YCJmG%G6o@Peg11/D7r&MWUJ+H@fm.I7P;`Rg@W71'-5M$B34S%O
%TUJ7oE9Uc18OTk:?;o?S^7dB^kQ#_h@&f&/pBQ!+)bL@,&7&bF#ph>,hB("i)#QgjSSF&:,92.u'+qfD<"hhe9H7=.ej2[-M23c)
%6oD6&5/:W6GjeUqpUOa1"0n[iW@!bPjDs8PJQ.gIm#3MFe\ncg,280VC((rS9M[P!Bl6n62iTEkG_r@G&7PdNc%D<89^(uo5u\L)
%n@<3]jTqi_kd8BI'Oj^j;GA@id[t#B56%.Y=OEch`g2j(@Td!AmDji9#(9@GVjcVP#LsOUi.hG>;YZ&Zn*Jt1"<n%*Mi95.EaY0c
%'q*?MCK+6>ldadAi6icJ'8tH/"ksiC#m6b)>S=&n7.u0Y+4&IsnAWUNdqRDZnJKfGodT$[kRpfg-s7?RQX]iP16ai2F>DB7&fKoi
%+?Qj?;bbZ]Z([ATV)(tC>2\3W=pilPC.\X</L@Dg$BdRCs*1cf!%k@qW?s^MNGA#r0LR:@92%4Jkee^V-#X"<Uagpg-W<_`Wh\u@
%Kak#YkiWJJ:55([6oA\0GPC8miP/;cWIU\=6o@P%Z:Fm9&).pX`\fp0AEUL#:#9[p&VE_M26l?I-Fb@?Xp*k:<<AL^VOBn`8*DnN
%XmgF;HoC?Td`GH%8a^PKm@2?RD/q9`\\lfq3Eh!uq"ml^f,3kn2*9?!kI=A`hR#.J7$j9U6HM_h?"s$"=G/"-d%ur*-Bc.EH:sAd
%Wlau<2KU^]F=+"Z$f'm%1C-lQWIU\=6o@Peg11.Y-gMfU[(*!2Rd<-qWl^_2&M^f6<"k0R?Bu6PP"%=.9&S.><0N,K#i2A^+k>Y#
%!ZO0<=um>IU]p11_g<W(R\\jQBIQeQ;P<a9s5RN,"1>Y9Vjcs72lauhJIsWH`)ID.5$f!3`CAHX9dF]BA?&3hZ@cI^e<"G94b4'5
%$n\$,C=30m]298mC6F09TVY%68V,T*s,TZe%.rPJSnbS&go)Q<)H;CR&lVLQq++Zb7:)aX8-3ntA?(J30S&"X[#f$[:;/'!1:2-M
%W_!TRk)PdM82WuT+ja,]R\W49Z2_k>2$T1_9i!Y"H#?TF2Zk:6E/CP@(4EhT\E'cbRRAE?l"$ec7'_GO;q+j^Ter_3"E`m=Wei"q
%#C5GN8dCq!?"0f?,r,JW*m`1Mr5CNTeJ,J_3;e@T,'8[?-B`bD34S%OK8*bI&R@GSC17KtJAo1jhPhjjF2ajX@S<Us9d6(Kji$Bc
%W?s&R(gBn<M.Q3G[NA;q(bire4k4)@\PZ)X1qEtN-)-hnL_88t%pH\$Tu0MN;,&ISkG"f;,G^d&diPtqLb5/i22Q-BIuZ,Vr,^"i
%7>%0K>>hJXATbu#*tQd:oYi[NeJ+oEW2=555:"mE_FH/(B*XbI&2B8LA8LLp"09YKaE5^2URIoo$i1,]SO,3=B\d"!IIWXXi/,5q
%TpeM_+)(68>`AhmbY0l/]-`BTW8=UO0aj^K9JrMS>mt"rm5rHelKD,SWehuVd(M_g@X"`=U6B(SKqY?+W$X+cmLCh&lV9=6!f!!R
%eKb=?*r1:J=CZjspZ,;;S`N<uGr$;3_Vc&*9e?-[$#[kS5rGW6i)4!`8OR^NrMHeBeJ.u[_,FcUW?eK8$bX)9<sntuC.\X</L@Dg
%$BdRCs*329TJ>m!W?s^QNGA#r@u(t,@]G8R+#(M_H#kPS\#p@R<1%D5OWC.Q'Xts.EUh_dUJ$<?-Bd0C!o#Z'?eXRI?uh$tX`CcM
%e+*1+RU0L.(\d8qPF^`'20m[%J.Z'rWX0sn-$?';[pp#=,X@\';b\Ng!VD[%K2e''$#HOoZr@[gU]kXW`>JfXVGt@X;PKVU5jbiV
%a-/@bBQ6gD2;*7m<0K6C,%>MJW?rC/]IYF*,`QP:Q,'65<0N,K#i2A^+k>Y#!ZNTt/X8^]Bn?0;nD4GM-7LnX>"VbX'W=1gs*329
%5V;EgW?s^QNGA#r?pkDU1"F4:O-bPeZ-i5D'+%nn9JqYtG0k#^)H';D-a9;]cr*G7P8:[aNM6DPP8'Mg/L@Dg$Ig-oIlqIUTGR@p
%<0Nm97Q#J?THZdjQtet08'975nf$%H&thmOW@!eD!.%;c6E2Iqq3kPsBW38W8IO>9NgFiY2+bV5cr-U,Ud4=Ps2Ull#*En$:GpgN
%DH)fY"!_8oM5_g;ICqPLjK5)D6mQ`N0\%Emfg2ejC+J1<)H9Z9>q/N*OlZKac[8+E^_<G89JrM3#/K!R)&e.B\7__.iq<Y5?dM2o
%/eQW%Oq/32Qb7If&8WPb980;kQI#k=bR<m1C@XPi/8?<9<0V,1fh="G:*3"a8\rO$P#>"*M_DC7GcJc61%+;*-9KJ3C@\7L70"tQ
%eHA3t^p\O8nq@Aj?7J?#T`C^CQ;Wa)C5Pc5gdWHq<0V,1fp;UW>OqUQPf8La4YaC@<"mI?MJYR!UbV(kH[;\@:4#f3d11UrYU,!a
%=SC#M/k$ml+LB/A;NV'^bc]$/c<@!3U0Xtb$A(o>W$W:^gC(GCrXoDt&\')c'8c&X9g5/LESubCWM[kA8`DJ)2sXDd$dg8tRS^:B
%L+^I=*G$XAFQm87M'Ok']g6gNGGgn(P@Hrr6VCLTR^BlB41#^)44TQ&(g9O2P8#9hjT"aXN<*4q-E!=!/2sTNS&#YA$na9b`1dd/
%i0M"n<0O<b/mV..M5ZHGh\7uER\HE=Ge+_q\e<Ph"lA(-.u"!u25LA/Q4h^n"j%h]IlM9!1'Wa.R\"9"oA$8kD`3?+_'PtI=S)V-
%glaVJJoU*+JP-eX9d6kfoUFi@GWIH@)g6>f@]G81GIYH^c/t?N\JLXgiFo83Xh]&V?)XW;)2#VIbt^.L3Gqf[2f0!@d3YZY;"@I]
%=.4P!(84;$FQm87M'Od*hGRmGC@XN=%:'Ao?&<=E!k5`"%"_GW.UZp=;,'r]p=TE*aVk8gGYLskfm.I7P;`Rf@W71'-5M$B/141<
%NG;@V^nlsg-5"?2\kQU#Wlau<2KU[\F=!qY$f(3*pI7\28O3r%.8`f;T_@%<j'`l/[<PDA2;*7m<0K6C,@YVKW?rC/]IXbSNNT1J
%8Dqq8<0N,K#JI"5+k>Y#!ZS]f>.P?sU]kX[UF6,m,R$W0V*m14J_FW6O%4$qo\q_keR[jR;,,n(W!LcsVOC?POg=V;]LFc@"R+:Q
%<"hi2!554B+k79tHqj$<B^&,gP8:[Q*A?Z=C6F/mcr-U,Ud4=Ps2Ull#*JGESnbS&go)Q<#"HPh&lVLUqKR"!a]h%gM+HRQ`Di%W
%A-]fFW3(G7Bi*1\kgIFL'1qU&o#s%W%QkoG`)ICBA,s8*StRn6Mq@;p;qrGQn-b\@cm>ET8Fg3Ki0(PZ)M1[OFQk!LM'_cp(A#Ci
%Vjb9E'oNud/R:t+M/4N*';lA:R\ZT1[\Qk9bMnFr5G"l0@#W_0<0Nm87Q#J?kTYPDLhZu77UXt5B_fMu%PM*U25(#BMj@8$OD9YJ
%He_(6[WEtK,dK$#3O\#?cRFbe%=2K"8Z=&&eJ6hf4@iu/(U*)&VE!s/2+9V%+i0HY5%<2,41GuULk3bo@nW..=ClYEVK:<,eJ.Cs
%20U4RF:$L9U31h!p;LCU+':h$,#f54liTsGSuZkhMj^QAgTF--0rd1u;p63.-)R,-Z7^ka`V(<`.!9XrAu^\51=3^#G%,ZnR\H!U
%6T7A*GG:P5^q2\8'WsOJPR8728lUug,^\VPl!UW'J/7TM9oV$`Bl7%:2Zk88R9X4&M+&L>!A8XRYU3A,>e1eg&lBZl^F=#U2+9`Z
%noQ[qF=4.]$bX)9=:5'KCJ"b(/L@Ji$BdRCs*38;^bKTXk2r-!6oV9jRuJV$FG[OT(4F+(\`D#C@,AIekgI^\PDJQ2rMI4BSrelV
%LE0^4R;4"g*A4REZh^FlmffS438,iP.ki,r+0K;uK>+9MRMp"JPMEr#DqZs#dRt!,U#a+e/iNTMX@&0So[:ul'1lR3]qrpqf]7C2
%*4hPB\eE_l"`AD#3<[0q<5@9e!h5uNmBQ]3UGW6k;56!-fjlJAO\O[@OGMjA-C\-0!OJ:UPr,d<<J$QT-C[CK6g-G)%ETsS'Bmff
%i6n1;-7s2O)r;Y[fd$`fJ4k`8Ooi&3rZ=qj(q<"/gY?J+S`kedGr&PHVO&-:@aPG)6E/W$P,a@,0AVRFM+Dg:CW[Qi9ti"-Tps0#
%4/#APi-%'%!h`7cE!a(>cmC2<HgLe&XGt&'e?$p>2VEq)Cm-de/OFuEfd;r2W%@m.YH^eI!Pie5gI)Yk5]8)Ua>QI7?^\MD?+L^(
%U]kXWa/_73S#"sTF=FIh;P<a9s5VcNK?L4HRN$.M'A_RnD[&qSr"?nA/Gam:I`Ydp2i1*'d`l`pLh$b(VQ?nI;e^'q%0Y/)E"bh2
%%g(!7Q-MN9_8L:+8n7q74W^=P0T6pEWTg:i7DeR2<"U9I6oU7hj2:sFD]LY=Rtq@!9lq%AkQ<Bup%M3?H(QTf2@s6,Q#75f9J.\f
%+@nF__8Z24dS29N0=(P$XN#cGC96R;S*W6r]ZHXt)$.]EGS:?;"P`')CD\C?MWlJ##mL*/[$6/qGZ/^ALUG&Rh24.JC^Yd=0DQ#u
%b)/W_T9rt`]SU3B`O6jadMNfj:"%gE;k3U?S"^oKOT8(4+gLC)*FXgn`(4L&!N''2X>7C3dlD6(Di/_OTXteE\qP'3dCR#!qr08;
%kS#+5_DdUu51&B>_:f+10YS4Yo`+`6rUe:*s77mnpu1D.s0"Xfrq!MCq%q]_rSN*Jpq)#<s7!WbrS-djpn&XXq=sa?n_8QmiMRdt
%op6d"rT>8Pq=Uq?qWe[lp#Bt>psYl#+5nlFdVjU2ji>.8a.IkWnMbsrj.HAK^$"4NFnk?BJ+lb=nEXH[07s7.!r~>
%AI9_PrivateDataEnd
